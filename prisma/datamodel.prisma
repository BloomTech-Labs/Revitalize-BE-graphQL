type UserAccount {
  id: ID! @id
  email: String! @unique
  password: String!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type ExternalAccount {
  id: ID! @id
  accountId: ID! @unique
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type UserProfile {
  id: ID! @id
  userAccountId: ID!
  email: String! @unique
  firstName: String
  lastName: String
  profileImage: String
  country: String
  address: String
  state: String
  city: String
  zip: Int
  aptNumber: String
  projects: [Project!]! @relation(name: "ProjectToUserProfile", onDelete: CASCADE)
  likedProjects: [ProjectLike!]! @relation(name: "ProjectLikeToUserProfile", onDelete: CASCADE)
  comments: [ProjectComment!] @relation(name: "CommentToUserProfile", onDelete: CASCADE)
  likedComments: [ProjectCommentLike!]! @relation(name: "CommentLikeToUserProfile", onDelete: CASCADE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Project {
  id: ID! @id
  profile: UserProfile! @relation(name: "ProjectToUserProfile", onDelete: SET_NULL)
  featuredImage: String
  images: [ProjectImage!] @relation(name: "ImagesToProject", onDelete: CASCADE)
  name: String!
  description: String!
  country: String!
  address: String!
  state: String!
  city: String!
  zip: Int
  goalAmount: Float!
  amountFunded: Float! @default(value: 0)
  likes: [ProjectLike!]! @relation(name: "ProjectLike", onDelete: CASCADE)
  comments: [ProjectComment!]! @relation(name: "ProjectComment", onDelete: CASCADE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type ProjectImage {
  id: ID! @id,
  project: Project! @relation(name: "ImagesToProject", onDelete: SET_NULL)
  imageUrl: String!
  deleteImageUrl: String!
}

type ProjectLike {
  id: ID! @id
  profile: UserProfile! @relation(name: "ProjectLikeToUserProfile", onDelete: SET_NULL)
  project: Project! @relation(name: "ProjectLike", onDelete: SET_NULL)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type ProjectComment {
  id: ID! @id
  profile: UserProfile! @relation(name: "CommentToUserProfile", onDelete: SET_NULL)
  project: Project! @relation(name: "ProjectComment", onDelete: SET_NULL)
  comment: String!
  likes: [ProjectCommentLike!]! @relation(name: "ProjectCommentLike", onDelete: CASCADE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type ProjectCommentLike {
  id: ID! @id
  profile: UserProfile! @relation(name: "CommentLikeToUserProfile", onDelete: SET_NULL)
  comment: ProjectComment! @relation(name: "ProjectCommentLike", onDelete: SET_NULL)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}
