type UserAccount {
  id: ID! @id
  email: String! @unique
  password: String!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type ExternalAccount {
  id: ID! @id
  accountId: ID! @unique
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type UserProfile {
  id: ID! @id
  userAccountId: ID!
  verified: boolean @default(value: false)
  email: String! @unique
  firstName: String
  lastName: String
  profileImage: String
  country: String
  address: String
  state: String
  city: String
  zip: Int
  aptNumber: String
  donations: [ProjectDonation!]! @relation(name: "ProjectDonationToUserProfile", onDelete: CASCADE)
  projects: [Project!]! @relation(name: "ProjectToUserProfile", onDelete: CASCADE)
  likedProjects: [ProjectLike!]! @relation(name: "ProjectLikeToUserProfile", onDelete: CASCADE)
  comments: [ProjectComment!] @relation(name: "CommentToUserProfile", onDelete: CASCADE)
  likedComments: [ProjectCommentLike!]! @relation(name: "CommentLikeToUserProfile", onDelete: CASCADE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Project {
  id: ID! @id
  profile: UserProfile! @relation(name: "ProjectToUserProfile", onDelete: SET_NULL)
  name: String!
  description: String!
  country: String!
  address: String!
  state: String!
  city: String!
  zip: Int!
  duration: Int!
  difficulty: String!
  startDate: DateTime!
  goalAmount: Float!
  amountFunded: Float! @default(value: 0)
  featuredImage: String
  donations: [ProjectDonation!]! @relation(name: "ProjectDonationToProject", onDelete: CASCADE)
  images: [ProjectImage!]! @relation(name: "ImagesToProject", onDelete: CASCADE)
  likes: [ProjectLike!]! @relation(name: "ProjectLike", onDelete: CASCADE)
  comments: [ProjectComment!]! @relation(name: "ProjectComment", onDelete: CASCADE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type ProjectDonation {
  id: ID! @id
  project: Project! @relation(name: "ProjectDonationToProject", onDelete: SET_NULL)
  profile: UserProfile! @relation(name: "ProjectDonationToUserProfile", onDelete: SET_NULL)
  amount: Float!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type ProjectImage {
  id: ID! @id,
  project: Project! @relation(name: "ImagesToProject")
  imageUrl: String!
  public_id: ID!
}

type ProjectLike {
  id: ID! @id
  profile: UserProfile! @relation(name: "ProjectLikeToUserProfile")
  project: Project! @relation(name: "ProjectLike", onDelete: SET_NULL)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type ProjectComment {
  id: ID! @id
  profile: UserProfile! @relation(name: "CommentToUserProfile")
  project: Project! @relation(name: "ProjectComment")
  comment: String!
  likes: [ProjectCommentLike!]! @relation(name: "ProjectCommentLike", onDelete: CASCADE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type ProjectCommentLike {
  id: ID! @id
  profile: UserProfile! @relation(name: "CommentLikeToUserProfile", onDelete: SET_NULL)
  comment: ProjectComment! @relation(name: "ProjectCommentLike", onDelete: SET_NULL)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}
