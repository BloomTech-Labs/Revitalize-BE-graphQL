# Queries
type Query {
	users(query: String): [User!]!
	user(id: ID!): User!
	me: User!
	projects(query: String): [Project!]!
	project(id: ID!): [Project!]!
}

# Mutations
type Mutation {
	createUser(data: CreateUserInput): AuthPayload!
	loginUser(data: LoginUserInput): AuthPayload!
	deleteUser: User!
	updateUser(data: UpdateUserInput): User!
	createProject(data: CreateProjectInput!): Project!
	deleteProject(id: ID!): Project!
	updateProject(id: ID!, data: UpdateProjectInput): Project!
}

# Enums
enum MutationType {
	CREATED
	UPDATED
	DELETED
}

# User
type User {
	id: ID!
	firstName: String
	lastName: String
	email: String
	password: String!
	profileImage: String
	city: String
	zip: String
	address: String
	state: String
	aptNumber: String
	projects: [Project!]!
}

input CreateUserInput {
	firstName: String
	lastName: String
	email: String!
	password: String!
	profileImage: String
	city: String
	zip: String
	address: String
	state: String
	aptNumber: String
}

input LoginUserInput {
	email: String!
	password: String!
}

input UpdateUserInput {
	firstName: String
	lastName: String
	email: String
	password: String
	profileImage: String
	city: String
	zip: String
	address: String
	state: String
	aptNumber: String
}

# Returned auth payload type
type AuthPayload {
	token: String!
	user: User!
}

type Project {
	id: ID!
	user: User!
	name: String!
	description: String!
	address: String!
	state: String!
	zip: String!
	city: String!
	goalAmount: Float!
	amountFunded: Float!
}

input CreateProjectInput {
	name: String!
	description: String!
	address: String!
	state: String!
	zip: String!
	city: String!
	goalAmount: Float!
	amountFunded: Float
}

input UpdateProjectInput {
	name: String
	description: String
	address: String
	state: String
	zip: String
	city: String
	goalAmount: Float
	amountFunded: Float
}
