scalar Upload
scalar Date

# Enums
enum Status {
  PENDING
  ACCEPTED
  DECLINED
}

# Returned auth payload type
type AuthPayload {
	token: String!
	profile: UserProfile!
}

# Queries
type Query {
	me: UserProfile!
	user(id: ID!): UserProfile!
	users(query: String): [UserProfile!]!
	project(id: ID!): Project!
	projects(query: String): [Project!]!
	myProjects: [Project!]!
	userProjects(id: ID!): [Project!]!
	projectLikes(id: ID!): [ProjectLike!]!
}

# Mutations
type Mutation {
	# Auth
	createUser(data: UserAccountInput!): AuthPayload!
	loginUser(data: UserAccountInput!): AuthPayload!
	loginExternalAccount(data: ExternalAccountAuthInput!): AuthPayload!

	# User
	updateUser(data: UpdateUserAccountInput): UserAccount!
	deleteUser: UserAccount!

	# Profile
	updateUserProfile(data: UpdateUserProfileInput!): UserProfile!
	deleteUserProfile: UserProfile!

	# Project
	createProject(data: CreateProjectInput!): Project!
	updateProject(id: ID!, data: UpdateProjectInput): Project!
	deleteProject(id: ID!): Project!

	# Project Donation
	createProjectDonation(id: ID!, data: CreateProjectDonationInput!): ProjectDonation!

	# Project likes
	createProjectLike(id: ID!): Project!
	deleteProjectLike(id: ID!): Project!

	# Project comments
	createProjectComment(data: CreateProjectCommentInput!): ProjectComment!
	updateProjectComment(data: UpdateProjectCommentInput!): ProjectComment!
	deleteProjectComment(id: ID!): ProjectComment!

	# Project comment likes
	createProjectCommentLike(id: ID!): ProjectComment!
	deleteProjectCommentLike(id: ID!): ProjectComment!

	# Project Trade
	createProjectTrade(data: CreateProjectTrade!): ProjectApplicant!

	# Project Applicant
	createProjectApplicant(data: CreateProjectApplicant!): ProjectApplicant!
}

# UserAccount
type UserAccount {
	id: ID!
	email: String!
	password: String!
}

input UserAccountInput {
	email: String!
	password: String!
}

input UpdateUserAccountInput {
	email: String
	password: String
}

# ExternalAccount
type ExternalAccount {
	id: ID!
	accountId: ID!
}

input ExternalAccountAuthInput {
	accountId: ID!
}

# User
type UserProfile {
	id: ID!
	userAccountId: ID!
	verified: Boolean
	email: String!
	firstName: String
	lastName: String
	profileImage: String
	country: String
	state: String
	city: String
	zip: Int
	phone: Int
	address: String
	aptNumber: String
	donations: [ProjectDonation!]!
	projects: [Project!]!
	likedProjects: [ProjectLike!]!
	comments: [ProjectComment!]
	likedComments: [ProjectCommentLike!]!
	applications: [ProjectApplicant!]!
}

input CreateUserProfileInput {
	firstName: String
	lastName: String
	email: String!
	profileImage: String
	country: String
	state: String
	city: String
	zip: Int
	address: String
	aptNumber: String
	phone: Int
}

input UpdateUserProfileInput {
	firstName: String
	lastName: String
	email: String
	profileImage: String
	country: String
	state: String
	city: String
	zip: Int
	address: String
	aptNumber: String
	phone: Int
}

# Project
type Project {
	id: ID!
	profile: UserProfile!
	name: String!
	description: String!
	country: String!
	state: String!
	city: String!
	zip: Int!
	address: String!
	goalAmount: Float!
	amountFunded: Float!
	duration: Int!
	difficulty: String!
	startDate: Date!
	featuredImage: String
	donations: [ProjectDonation!]!
	likes: [ProjectLike!]!
	comments: [ProjectComment!]!
	images: [ProjectImage!]!
	applicants: [ProjectApplicant!]!
}

type ProjectDonation {
	id: ID!
	project: Project!
	profile: UserProfile!
	amount: Float!
}

input CreateProjectDonationInput {
	amount: Float!
	token: String!
}

type ProjectImage {
	id: ID!
	project: Project!
	imageUrl: String!
	public_id: String!
}

input CreateProjectInput {
	name: String!
	description: String!
	country: String!
	state: String!
	city: String!
	zip: Int!
	address: String!
	goalAmount: Float!
	duration: Int!
	difficulty: String!
	startDate: Date!
	featuredImage: Upload
	images: [Upload!]
}

input UpdateProjectInput {
	name: String
	description: String
	country: String
	state: String
	city: String
	zip: Int
	address: String
	duration: Int
	difficulty: String
	startDate: Date
	goalAmount: Float
	amountFunded: Float
}

# Project Like
type ProjectLike {
	id: ID!
	profile: UserProfile!
	project: Project!
}

# Project Comment
type ProjectComment {
	id: ID!
	profile: UserProfile!
	project: Project!
	comment: String!
	likes: [ProjectCommentLike!]!
}

input CreateProjectCommentInput {
	id: ID!
	comment: String!
}

input UpdateProjectCommentInput {
	id: ID!
	comment: String!
}

# Project comment like
type ProjectCommentLike {
	id: ID!
	profile: UserProfile!
	comment: ProjectComment!
}

# Project Trade
type ProjectTrade {
  id: ID!
  project: Project!
  name: String!
  description: String!
}

input CreateProjectTrade {
  project: ID!
  name: String!
  description: String!
}

input UpdateProjectTrade {
  project: ID!
  name: String
  description: String
}

# Project Applicant
type ProjectApplicant {
  id: ID!
  project: Project!
  profile: UserProfile!
  trade: ProjectTrade!
  coverLetter: String!
  status: Status!
}

input CreateProjectApplicant {
  project: ID!
  trade: ID!
  coverLetter: String!
  status: Status!
}

input UpdateProjectApplicant {
  project: ID!
  trade: ID!
  coverLetter: String
  status: Status
}
