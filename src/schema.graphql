# Queries
type Query {
	profiles(query: String): [UserProfile!]!
	profile(id: ID!): UserProfile!
	me: UserProfile!
	projects(query: String): [Project!]!
	project(id: ID!): [Project!]!
}

# Mutations
type Mutation {
	# Auth
	createUser(data: CreateUserInput!): AuthPayload!
	loginUser(data: LoginUserInput!): AuthPayload!
	loginGoogleUser(data: GoogleAccountInput!): AuthPayload!
	loginFacebookUser(data: FacebookAccountInput!): AuthPayload!
	loginTwitterUser(data: TwitterAccountInput!): AuthPayload!

	# User
	updateUser(data: UpdateUserInput): User!
	deleteUser: User!

	# Profile
	createProfile(date: CreateUserProfileInput!): UserProfile!
	updateProfile(data: UpdateUserProfileInput!): UserProfile!
	deleteProfile: UserProfile!

	# Project
	createProject(data: CreateProjectInput!): Project!
	deleteProject(id: ID!): Project!
	updateProject(id: ID!, data: UpdateProjectInput): Project!
}

# UserAccount
type UserAccount {
  id: ID!
  email: String!
  password: String
  profile: UserProfile!
}

input LoginUserAccountInput {
	email: String!
	password: String!
}

# GoogleAccount
type GoogleAccount {
  id: ID!
  accountId: ID!
  profile: UserProfile!
}

# FacebookAccount
type FacebookAccount {
  id: ID!
  accountId: ID!
  profile: UserProfile!
}

# TwitterAccount
type TwitterAccount {
  id: ID!
  accountId: ID!
  profile: UserProfile!
}

# User
type UserProfile {
  id: ID!
  user: AccountType!
  email: String!
  firstName: String
  lastName: String
  profileImage: String
  city: String
  zip: String
  address: String
  state: String
  aptNumber: String
  projects: [Project!]
}

input CreateUserProfileInput {
	firstName: String
	lastName: String
	email: String!
	profileImage: String
	city: String
	zip: String
	address: String
	state: String
	aptNumber: String
}

input UpdateUserInput {
	firstName: String
	lastName: String
	email: String
	password: String
	profileImage: String
	city: String
	zip: String
	address: String
	state: String
	aptNumber: String
}

type Project {
  id: ID!
  profile: UserProfile!
  name: String!
  description: String!
  address: String!
  state: String!
  zip: String!
  city: String!
  goalAmount: Float!
  amountFunded: Float!
}

input CreateProjectInput {
	name: String!
	description: String!
	address: String!
	state: String!
	zip: String!
	city: String!
	goalAmount: Float!
	amountFunded: Float!
}

input UpdateProjectInput {
	name: String
	description: String
	address: String
	state: String
	zip: String
	city: String
	goalAmount: Float
	amountFunded: Float
}

# Enums
enum MutationType {
	CREATED
	UPDATED
	DELETED
}

enum AccountType {
  UserAccount
  GoogleAccount
  FacebookAccount
  TwitterAccount
}


# Returned auth payload type
type AuthPayload {
	token: String!
	user: UserProfile!
}
