// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  externalAccount: (where?: ExternalAccountWhereInput) => Promise<boolean>;
  project: (where?: ProjectWhereInput) => Promise<boolean>;
  projectComment: (where?: ProjectCommentWhereInput) => Promise<boolean>;
  projectCommentLike: (
    where?: ProjectCommentLikeWhereInput
  ) => Promise<boolean>;
  projectImage: (where?: ProjectImageWhereInput) => Promise<boolean>;
  projectLike: (where?: ProjectLikeWhereInput) => Promise<boolean>;
  userAccount: (where?: UserAccountWhereInput) => Promise<boolean>;
  userProfile: (where?: UserProfileWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  externalAccount: (
    where: ExternalAccountWhereUniqueInput
  ) => ExternalAccountNullablePromise;
  externalAccounts: (args?: {
    where?: ExternalAccountWhereInput;
    orderBy?: ExternalAccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ExternalAccount>;
  externalAccountsConnection: (args?: {
    where?: ExternalAccountWhereInput;
    orderBy?: ExternalAccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ExternalAccountConnectionPromise;
  project: (where: ProjectWhereUniqueInput) => ProjectNullablePromise;
  projects: (args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Project>;
  projectsConnection: (args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProjectConnectionPromise;
  projectComment: (
    where: ProjectCommentWhereUniqueInput
  ) => ProjectCommentNullablePromise;
  projectComments: (args?: {
    where?: ProjectCommentWhereInput;
    orderBy?: ProjectCommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ProjectComment>;
  projectCommentsConnection: (args?: {
    where?: ProjectCommentWhereInput;
    orderBy?: ProjectCommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProjectCommentConnectionPromise;
  projectCommentLike: (
    where: ProjectCommentLikeWhereUniqueInput
  ) => ProjectCommentLikeNullablePromise;
  projectCommentLikes: (args?: {
    where?: ProjectCommentLikeWhereInput;
    orderBy?: ProjectCommentLikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ProjectCommentLike>;
  projectCommentLikesConnection: (args?: {
    where?: ProjectCommentLikeWhereInput;
    orderBy?: ProjectCommentLikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProjectCommentLikeConnectionPromise;
  projectImage: (
    where: ProjectImageWhereUniqueInput
  ) => ProjectImageNullablePromise;
  projectImages: (args?: {
    where?: ProjectImageWhereInput;
    orderBy?: ProjectImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ProjectImage>;
  projectImagesConnection: (args?: {
    where?: ProjectImageWhereInput;
    orderBy?: ProjectImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProjectImageConnectionPromise;
  projectLike: (
    where: ProjectLikeWhereUniqueInput
  ) => ProjectLikeNullablePromise;
  projectLikes: (args?: {
    where?: ProjectLikeWhereInput;
    orderBy?: ProjectLikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ProjectLike>;
  projectLikesConnection: (args?: {
    where?: ProjectLikeWhereInput;
    orderBy?: ProjectLikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProjectLikeConnectionPromise;
  userAccount: (
    where: UserAccountWhereUniqueInput
  ) => UserAccountNullablePromise;
  userAccounts: (args?: {
    where?: UserAccountWhereInput;
    orderBy?: UserAccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<UserAccount>;
  userAccountsConnection: (args?: {
    where?: UserAccountWhereInput;
    orderBy?: UserAccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserAccountConnectionPromise;
  userProfile: (
    where: UserProfileWhereUniqueInput
  ) => UserProfileNullablePromise;
  userProfiles: (args?: {
    where?: UserProfileWhereInput;
    orderBy?: UserProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<UserProfile>;
  userProfilesConnection: (args?: {
    where?: UserProfileWhereInput;
    orderBy?: UserProfileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserProfileConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createExternalAccount: (
    data: ExternalAccountCreateInput
  ) => ExternalAccountPromise;
  updateExternalAccount: (args: {
    data: ExternalAccountUpdateInput;
    where: ExternalAccountWhereUniqueInput;
  }) => ExternalAccountPromise;
  updateManyExternalAccounts: (args: {
    data: ExternalAccountUpdateManyMutationInput;
    where?: ExternalAccountWhereInput;
  }) => BatchPayloadPromise;
  upsertExternalAccount: (args: {
    where: ExternalAccountWhereUniqueInput;
    create: ExternalAccountCreateInput;
    update: ExternalAccountUpdateInput;
  }) => ExternalAccountPromise;
  deleteExternalAccount: (
    where: ExternalAccountWhereUniqueInput
  ) => ExternalAccountPromise;
  deleteManyExternalAccounts: (
    where?: ExternalAccountWhereInput
  ) => BatchPayloadPromise;
  createProject: (data: ProjectCreateInput) => ProjectPromise;
  updateProject: (args: {
    data: ProjectUpdateInput;
    where: ProjectWhereUniqueInput;
  }) => ProjectPromise;
  updateManyProjects: (args: {
    data: ProjectUpdateManyMutationInput;
    where?: ProjectWhereInput;
  }) => BatchPayloadPromise;
  upsertProject: (args: {
    where: ProjectWhereUniqueInput;
    create: ProjectCreateInput;
    update: ProjectUpdateInput;
  }) => ProjectPromise;
  deleteProject: (where: ProjectWhereUniqueInput) => ProjectPromise;
  deleteManyProjects: (where?: ProjectWhereInput) => BatchPayloadPromise;
  createProjectComment: (
    data: ProjectCommentCreateInput
  ) => ProjectCommentPromise;
  updateProjectComment: (args: {
    data: ProjectCommentUpdateInput;
    where: ProjectCommentWhereUniqueInput;
  }) => ProjectCommentPromise;
  updateManyProjectComments: (args: {
    data: ProjectCommentUpdateManyMutationInput;
    where?: ProjectCommentWhereInput;
  }) => BatchPayloadPromise;
  upsertProjectComment: (args: {
    where: ProjectCommentWhereUniqueInput;
    create: ProjectCommentCreateInput;
    update: ProjectCommentUpdateInput;
  }) => ProjectCommentPromise;
  deleteProjectComment: (
    where: ProjectCommentWhereUniqueInput
  ) => ProjectCommentPromise;
  deleteManyProjectComments: (
    where?: ProjectCommentWhereInput
  ) => BatchPayloadPromise;
  createProjectCommentLike: (
    data: ProjectCommentLikeCreateInput
  ) => ProjectCommentLikePromise;
  updateProjectCommentLike: (args: {
    data: ProjectCommentLikeUpdateInput;
    where: ProjectCommentLikeWhereUniqueInput;
  }) => ProjectCommentLikePromise;
  upsertProjectCommentLike: (args: {
    where: ProjectCommentLikeWhereUniqueInput;
    create: ProjectCommentLikeCreateInput;
    update: ProjectCommentLikeUpdateInput;
  }) => ProjectCommentLikePromise;
  deleteProjectCommentLike: (
    where: ProjectCommentLikeWhereUniqueInput
  ) => ProjectCommentLikePromise;
  deleteManyProjectCommentLikes: (
    where?: ProjectCommentLikeWhereInput
  ) => BatchPayloadPromise;
  createProjectImage: (data: ProjectImageCreateInput) => ProjectImagePromise;
  updateProjectImage: (args: {
    data: ProjectImageUpdateInput;
    where: ProjectImageWhereUniqueInput;
  }) => ProjectImagePromise;
  updateManyProjectImages: (args: {
    data: ProjectImageUpdateManyMutationInput;
    where?: ProjectImageWhereInput;
  }) => BatchPayloadPromise;
  upsertProjectImage: (args: {
    where: ProjectImageWhereUniqueInput;
    create: ProjectImageCreateInput;
    update: ProjectImageUpdateInput;
  }) => ProjectImagePromise;
  deleteProjectImage: (
    where: ProjectImageWhereUniqueInput
  ) => ProjectImagePromise;
  deleteManyProjectImages: (
    where?: ProjectImageWhereInput
  ) => BatchPayloadPromise;
  createProjectLike: (data: ProjectLikeCreateInput) => ProjectLikePromise;
  updateProjectLike: (args: {
    data: ProjectLikeUpdateInput;
    where: ProjectLikeWhereUniqueInput;
  }) => ProjectLikePromise;
  upsertProjectLike: (args: {
    where: ProjectLikeWhereUniqueInput;
    create: ProjectLikeCreateInput;
    update: ProjectLikeUpdateInput;
  }) => ProjectLikePromise;
  deleteProjectLike: (where: ProjectLikeWhereUniqueInput) => ProjectLikePromise;
  deleteManyProjectLikes: (
    where?: ProjectLikeWhereInput
  ) => BatchPayloadPromise;
  createUserAccount: (data: UserAccountCreateInput) => UserAccountPromise;
  updateUserAccount: (args: {
    data: UserAccountUpdateInput;
    where: UserAccountWhereUniqueInput;
  }) => UserAccountPromise;
  updateManyUserAccounts: (args: {
    data: UserAccountUpdateManyMutationInput;
    where?: UserAccountWhereInput;
  }) => BatchPayloadPromise;
  upsertUserAccount: (args: {
    where: UserAccountWhereUniqueInput;
    create: UserAccountCreateInput;
    update: UserAccountUpdateInput;
  }) => UserAccountPromise;
  deleteUserAccount: (where: UserAccountWhereUniqueInput) => UserAccountPromise;
  deleteManyUserAccounts: (
    where?: UserAccountWhereInput
  ) => BatchPayloadPromise;
  createUserProfile: (data: UserProfileCreateInput) => UserProfilePromise;
  updateUserProfile: (args: {
    data: UserProfileUpdateInput;
    where: UserProfileWhereUniqueInput;
  }) => UserProfilePromise;
  updateManyUserProfiles: (args: {
    data: UserProfileUpdateManyMutationInput;
    where?: UserProfileWhereInput;
  }) => BatchPayloadPromise;
  upsertUserProfile: (args: {
    where: UserProfileWhereUniqueInput;
    create: UserProfileCreateInput;
    update: UserProfileUpdateInput;
  }) => UserProfilePromise;
  deleteUserProfile: (where: UserProfileWhereUniqueInput) => UserProfilePromise;
  deleteManyUserProfiles: (
    where?: UserProfileWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  externalAccount: (
    where?: ExternalAccountSubscriptionWhereInput
  ) => ExternalAccountSubscriptionPayloadSubscription;
  project: (
    where?: ProjectSubscriptionWhereInput
  ) => ProjectSubscriptionPayloadSubscription;
  projectComment: (
    where?: ProjectCommentSubscriptionWhereInput
  ) => ProjectCommentSubscriptionPayloadSubscription;
  projectCommentLike: (
    where?: ProjectCommentLikeSubscriptionWhereInput
  ) => ProjectCommentLikeSubscriptionPayloadSubscription;
  projectImage: (
    where?: ProjectImageSubscriptionWhereInput
  ) => ProjectImageSubscriptionPayloadSubscription;
  projectLike: (
    where?: ProjectLikeSubscriptionWhereInput
  ) => ProjectLikeSubscriptionPayloadSubscription;
  userAccount: (
    where?: UserAccountSubscriptionWhereInput
  ) => UserAccountSubscriptionPayloadSubscription;
  userProfile: (
    where?: UserProfileSubscriptionWhereInput
  ) => UserProfileSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ExternalAccountOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "accountId_ASC"
  | "accountId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProjectOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "featuredImage_ASC"
  | "featuredImage_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "country_ASC"
  | "country_DESC"
  | "address_ASC"
  | "address_DESC"
  | "state_ASC"
  | "state_DESC"
  | "city_ASC"
  | "city_DESC"
  | "zip_ASC"
  | "zip_DESC"
  | "goalAmount_ASC"
  | "goalAmount_DESC"
  | "amountFunded_ASC"
  | "amountFunded_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProjectLikeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProjectCommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "comment_ASC"
  | "comment_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProjectCommentLikeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProjectImageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "imageUrl_ASC"
  | "imageUrl_DESC"
  | "deleteImageUrl_ASC"
  | "deleteImageUrl_DESC";

export type UserAccountOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserProfileOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "userAccountId_ASC"
  | "userAccountId_DESC"
  | "email_ASC"
  | "email_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "profileImage_ASC"
  | "profileImage_DESC"
  | "country_ASC"
  | "country_DESC"
  | "address_ASC"
  | "address_DESC"
  | "state_ASC"
  | "state_DESC"
  | "city_ASC"
  | "city_DESC"
  | "zip_ASC"
  | "zip_DESC"
  | "aptNumber_ASC"
  | "aptNumber_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ExternalAccountWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  accountId?: Maybe<ID_Input>;
}>;

export interface ExternalAccountWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  accountId?: Maybe<ID_Input>;
  accountId_not?: Maybe<ID_Input>;
  accountId_in?: Maybe<ID_Input[] | ID_Input>;
  accountId_not_in?: Maybe<ID_Input[] | ID_Input>;
  accountId_lt?: Maybe<ID_Input>;
  accountId_lte?: Maybe<ID_Input>;
  accountId_gt?: Maybe<ID_Input>;
  accountId_gte?: Maybe<ID_Input>;
  accountId_contains?: Maybe<ID_Input>;
  accountId_not_contains?: Maybe<ID_Input>;
  accountId_starts_with?: Maybe<ID_Input>;
  accountId_not_starts_with?: Maybe<ID_Input>;
  accountId_ends_with?: Maybe<ID_Input>;
  accountId_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ExternalAccountWhereInput[] | ExternalAccountWhereInput>;
  OR?: Maybe<ExternalAccountWhereInput[] | ExternalAccountWhereInput>;
  NOT?: Maybe<ExternalAccountWhereInput[] | ExternalAccountWhereInput>;
}

export type ProjectWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ProjectWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  profile?: Maybe<UserProfileWhereInput>;
  featuredImage?: Maybe<String>;
  featuredImage_not?: Maybe<String>;
  featuredImage_in?: Maybe<String[] | String>;
  featuredImage_not_in?: Maybe<String[] | String>;
  featuredImage_lt?: Maybe<String>;
  featuredImage_lte?: Maybe<String>;
  featuredImage_gt?: Maybe<String>;
  featuredImage_gte?: Maybe<String>;
  featuredImage_contains?: Maybe<String>;
  featuredImage_not_contains?: Maybe<String>;
  featuredImage_starts_with?: Maybe<String>;
  featuredImage_not_starts_with?: Maybe<String>;
  featuredImage_ends_with?: Maybe<String>;
  featuredImage_not_ends_with?: Maybe<String>;
  images_every?: Maybe<ProjectImageWhereInput>;
  images_some?: Maybe<ProjectImageWhereInput>;
  images_none?: Maybe<ProjectImageWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  country?: Maybe<String>;
  country_not?: Maybe<String>;
  country_in?: Maybe<String[] | String>;
  country_not_in?: Maybe<String[] | String>;
  country_lt?: Maybe<String>;
  country_lte?: Maybe<String>;
  country_gt?: Maybe<String>;
  country_gte?: Maybe<String>;
  country_contains?: Maybe<String>;
  country_not_contains?: Maybe<String>;
  country_starts_with?: Maybe<String>;
  country_not_starts_with?: Maybe<String>;
  country_ends_with?: Maybe<String>;
  country_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  zip?: Maybe<Int>;
  zip_not?: Maybe<Int>;
  zip_in?: Maybe<Int[] | Int>;
  zip_not_in?: Maybe<Int[] | Int>;
  zip_lt?: Maybe<Int>;
  zip_lte?: Maybe<Int>;
  zip_gt?: Maybe<Int>;
  zip_gte?: Maybe<Int>;
  goalAmount?: Maybe<Float>;
  goalAmount_not?: Maybe<Float>;
  goalAmount_in?: Maybe<Float[] | Float>;
  goalAmount_not_in?: Maybe<Float[] | Float>;
  goalAmount_lt?: Maybe<Float>;
  goalAmount_lte?: Maybe<Float>;
  goalAmount_gt?: Maybe<Float>;
  goalAmount_gte?: Maybe<Float>;
  amountFunded?: Maybe<Float>;
  amountFunded_not?: Maybe<Float>;
  amountFunded_in?: Maybe<Float[] | Float>;
  amountFunded_not_in?: Maybe<Float[] | Float>;
  amountFunded_lt?: Maybe<Float>;
  amountFunded_lte?: Maybe<Float>;
  amountFunded_gt?: Maybe<Float>;
  amountFunded_gte?: Maybe<Float>;
  likes_every?: Maybe<ProjectLikeWhereInput>;
  likes_some?: Maybe<ProjectLikeWhereInput>;
  likes_none?: Maybe<ProjectLikeWhereInput>;
  comments_every?: Maybe<ProjectCommentWhereInput>;
  comments_some?: Maybe<ProjectCommentWhereInput>;
  comments_none?: Maybe<ProjectCommentWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
  OR?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
  NOT?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
}

export interface UserProfileWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  userAccountId?: Maybe<ID_Input>;
  userAccountId_not?: Maybe<ID_Input>;
  userAccountId_in?: Maybe<ID_Input[] | ID_Input>;
  userAccountId_not_in?: Maybe<ID_Input[] | ID_Input>;
  userAccountId_lt?: Maybe<ID_Input>;
  userAccountId_lte?: Maybe<ID_Input>;
  userAccountId_gt?: Maybe<ID_Input>;
  userAccountId_gte?: Maybe<ID_Input>;
  userAccountId_contains?: Maybe<ID_Input>;
  userAccountId_not_contains?: Maybe<ID_Input>;
  userAccountId_starts_with?: Maybe<ID_Input>;
  userAccountId_not_starts_with?: Maybe<ID_Input>;
  userAccountId_ends_with?: Maybe<ID_Input>;
  userAccountId_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  profileImage?: Maybe<String>;
  profileImage_not?: Maybe<String>;
  profileImage_in?: Maybe<String[] | String>;
  profileImage_not_in?: Maybe<String[] | String>;
  profileImage_lt?: Maybe<String>;
  profileImage_lte?: Maybe<String>;
  profileImage_gt?: Maybe<String>;
  profileImage_gte?: Maybe<String>;
  profileImage_contains?: Maybe<String>;
  profileImage_not_contains?: Maybe<String>;
  profileImage_starts_with?: Maybe<String>;
  profileImage_not_starts_with?: Maybe<String>;
  profileImage_ends_with?: Maybe<String>;
  profileImage_not_ends_with?: Maybe<String>;
  country?: Maybe<String>;
  country_not?: Maybe<String>;
  country_in?: Maybe<String[] | String>;
  country_not_in?: Maybe<String[] | String>;
  country_lt?: Maybe<String>;
  country_lte?: Maybe<String>;
  country_gt?: Maybe<String>;
  country_gte?: Maybe<String>;
  country_contains?: Maybe<String>;
  country_not_contains?: Maybe<String>;
  country_starts_with?: Maybe<String>;
  country_not_starts_with?: Maybe<String>;
  country_ends_with?: Maybe<String>;
  country_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  zip?: Maybe<Int>;
  zip_not?: Maybe<Int>;
  zip_in?: Maybe<Int[] | Int>;
  zip_not_in?: Maybe<Int[] | Int>;
  zip_lt?: Maybe<Int>;
  zip_lte?: Maybe<Int>;
  zip_gt?: Maybe<Int>;
  zip_gte?: Maybe<Int>;
  aptNumber?: Maybe<String>;
  aptNumber_not?: Maybe<String>;
  aptNumber_in?: Maybe<String[] | String>;
  aptNumber_not_in?: Maybe<String[] | String>;
  aptNumber_lt?: Maybe<String>;
  aptNumber_lte?: Maybe<String>;
  aptNumber_gt?: Maybe<String>;
  aptNumber_gte?: Maybe<String>;
  aptNumber_contains?: Maybe<String>;
  aptNumber_not_contains?: Maybe<String>;
  aptNumber_starts_with?: Maybe<String>;
  aptNumber_not_starts_with?: Maybe<String>;
  aptNumber_ends_with?: Maybe<String>;
  aptNumber_not_ends_with?: Maybe<String>;
  projects_every?: Maybe<ProjectWhereInput>;
  projects_some?: Maybe<ProjectWhereInput>;
  projects_none?: Maybe<ProjectWhereInput>;
  likedProjects_every?: Maybe<ProjectLikeWhereInput>;
  likedProjects_some?: Maybe<ProjectLikeWhereInput>;
  likedProjects_none?: Maybe<ProjectLikeWhereInput>;
  comments_every?: Maybe<ProjectCommentWhereInput>;
  comments_some?: Maybe<ProjectCommentWhereInput>;
  comments_none?: Maybe<ProjectCommentWhereInput>;
  likedComments_every?: Maybe<ProjectCommentLikeWhereInput>;
  likedComments_some?: Maybe<ProjectCommentLikeWhereInput>;
  likedComments_none?: Maybe<ProjectCommentLikeWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserProfileWhereInput[] | UserProfileWhereInput>;
  OR?: Maybe<UserProfileWhereInput[] | UserProfileWhereInput>;
  NOT?: Maybe<UserProfileWhereInput[] | UserProfileWhereInput>;
}

export interface ProjectLikeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  profile?: Maybe<UserProfileWhereInput>;
  project?: Maybe<ProjectWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ProjectLikeWhereInput[] | ProjectLikeWhereInput>;
  OR?: Maybe<ProjectLikeWhereInput[] | ProjectLikeWhereInput>;
  NOT?: Maybe<ProjectLikeWhereInput[] | ProjectLikeWhereInput>;
}

export interface ProjectCommentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  profile?: Maybe<UserProfileWhereInput>;
  project?: Maybe<ProjectWhereInput>;
  comment?: Maybe<String>;
  comment_not?: Maybe<String>;
  comment_in?: Maybe<String[] | String>;
  comment_not_in?: Maybe<String[] | String>;
  comment_lt?: Maybe<String>;
  comment_lte?: Maybe<String>;
  comment_gt?: Maybe<String>;
  comment_gte?: Maybe<String>;
  comment_contains?: Maybe<String>;
  comment_not_contains?: Maybe<String>;
  comment_starts_with?: Maybe<String>;
  comment_not_starts_with?: Maybe<String>;
  comment_ends_with?: Maybe<String>;
  comment_not_ends_with?: Maybe<String>;
  likes_every?: Maybe<ProjectCommentLikeWhereInput>;
  likes_some?: Maybe<ProjectCommentLikeWhereInput>;
  likes_none?: Maybe<ProjectCommentLikeWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ProjectCommentWhereInput[] | ProjectCommentWhereInput>;
  OR?: Maybe<ProjectCommentWhereInput[] | ProjectCommentWhereInput>;
  NOT?: Maybe<ProjectCommentWhereInput[] | ProjectCommentWhereInput>;
}

export interface ProjectCommentLikeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  profile?: Maybe<UserProfileWhereInput>;
  comment?: Maybe<ProjectCommentWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ProjectCommentLikeWhereInput[] | ProjectCommentLikeWhereInput>;
  OR?: Maybe<ProjectCommentLikeWhereInput[] | ProjectCommentLikeWhereInput>;
  NOT?: Maybe<ProjectCommentLikeWhereInput[] | ProjectCommentLikeWhereInput>;
}

export interface ProjectImageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  project?: Maybe<ProjectWhereInput>;
  imageUrl?: Maybe<String>;
  imageUrl_not?: Maybe<String>;
  imageUrl_in?: Maybe<String[] | String>;
  imageUrl_not_in?: Maybe<String[] | String>;
  imageUrl_lt?: Maybe<String>;
  imageUrl_lte?: Maybe<String>;
  imageUrl_gt?: Maybe<String>;
  imageUrl_gte?: Maybe<String>;
  imageUrl_contains?: Maybe<String>;
  imageUrl_not_contains?: Maybe<String>;
  imageUrl_starts_with?: Maybe<String>;
  imageUrl_not_starts_with?: Maybe<String>;
  imageUrl_ends_with?: Maybe<String>;
  imageUrl_not_ends_with?: Maybe<String>;
  deleteImageUrl?: Maybe<String>;
  deleteImageUrl_not?: Maybe<String>;
  deleteImageUrl_in?: Maybe<String[] | String>;
  deleteImageUrl_not_in?: Maybe<String[] | String>;
  deleteImageUrl_lt?: Maybe<String>;
  deleteImageUrl_lte?: Maybe<String>;
  deleteImageUrl_gt?: Maybe<String>;
  deleteImageUrl_gte?: Maybe<String>;
  deleteImageUrl_contains?: Maybe<String>;
  deleteImageUrl_not_contains?: Maybe<String>;
  deleteImageUrl_starts_with?: Maybe<String>;
  deleteImageUrl_not_starts_with?: Maybe<String>;
  deleteImageUrl_ends_with?: Maybe<String>;
  deleteImageUrl_not_ends_with?: Maybe<String>;
  AND?: Maybe<ProjectImageWhereInput[] | ProjectImageWhereInput>;
  OR?: Maybe<ProjectImageWhereInput[] | ProjectImageWhereInput>;
  NOT?: Maybe<ProjectImageWhereInput[] | ProjectImageWhereInput>;
}

export type ProjectCommentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ProjectCommentLikeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ProjectImageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ProjectLikeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserAccountWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface UserAccountWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserAccountWhereInput[] | UserAccountWhereInput>;
  OR?: Maybe<UserAccountWhereInput[] | UserAccountWhereInput>;
  NOT?: Maybe<UserAccountWhereInput[] | UserAccountWhereInput>;
}

export type UserProfileWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface ExternalAccountCreateInput {
  id?: Maybe<ID_Input>;
  accountId: ID_Input;
}

export interface ExternalAccountUpdateInput {
  accountId?: Maybe<ID_Input>;
}

export interface ExternalAccountUpdateManyMutationInput {
  accountId?: Maybe<ID_Input>;
}

export interface ProjectCreateInput {
  id?: Maybe<ID_Input>;
  profile: UserProfileCreateOneWithoutProjectsInput;
  featuredImage: String;
  images?: Maybe<ProjectImageCreateManyWithoutProjectInput>;
  name: String;
  description: String;
  country: String;
  address?: Maybe<String>;
  state?: Maybe<String>;
  city?: Maybe<String>;
  zip?: Maybe<Int>;
  goalAmount: Float;
  amountFunded?: Maybe<Float>;
  likes?: Maybe<ProjectLikeCreateManyWithoutProjectInput>;
  comments?: Maybe<ProjectCommentCreateManyWithoutProjectInput>;
}

export interface UserProfileCreateOneWithoutProjectsInput {
  create?: Maybe<UserProfileCreateWithoutProjectsInput>;
  connect?: Maybe<UserProfileWhereUniqueInput>;
}

export interface UserProfileCreateWithoutProjectsInput {
  id?: Maybe<ID_Input>;
  userAccountId: ID_Input;
  email: String;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  profileImage?: Maybe<String>;
  country?: Maybe<String>;
  address?: Maybe<String>;
  state?: Maybe<String>;
  city?: Maybe<String>;
  zip?: Maybe<Int>;
  aptNumber?: Maybe<String>;
  likedProjects?: Maybe<ProjectLikeCreateManyWithoutProfileInput>;
  comments?: Maybe<ProjectCommentCreateManyWithoutProfileInput>;
  likedComments?: Maybe<ProjectCommentLikeCreateManyWithoutProfileInput>;
}

export interface ProjectLikeCreateManyWithoutProfileInput {
  create?: Maybe<
    | ProjectLikeCreateWithoutProfileInput[]
    | ProjectLikeCreateWithoutProfileInput
  >;
  connect?: Maybe<ProjectLikeWhereUniqueInput[] | ProjectLikeWhereUniqueInput>;
}

export interface ProjectLikeCreateWithoutProfileInput {
  id?: Maybe<ID_Input>;
  project: ProjectCreateOneWithoutLikesInput;
}

export interface ProjectCreateOneWithoutLikesInput {
  create?: Maybe<ProjectCreateWithoutLikesInput>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface ProjectCreateWithoutLikesInput {
  id?: Maybe<ID_Input>;
  profile: UserProfileCreateOneWithoutProjectsInput;
  featuredImage: String;
  images?: Maybe<ProjectImageCreateManyWithoutProjectInput>;
  name: String;
  description: String;
  country: String;
  address?: Maybe<String>;
  state?: Maybe<String>;
  city?: Maybe<String>;
  zip?: Maybe<Int>;
  goalAmount: Float;
  amountFunded?: Maybe<Float>;
  comments?: Maybe<ProjectCommentCreateManyWithoutProjectInput>;
}

export interface ProjectImageCreateManyWithoutProjectInput {
  create?: Maybe<
    | ProjectImageCreateWithoutProjectInput[]
    | ProjectImageCreateWithoutProjectInput
  >;
  connect?: Maybe<
    ProjectImageWhereUniqueInput[] | ProjectImageWhereUniqueInput
  >;
}

export interface ProjectImageCreateWithoutProjectInput {
  id?: Maybe<ID_Input>;
  imageUrl: String;
  deleteImageUrl: String;
}

export interface ProjectCommentCreateManyWithoutProjectInput {
  create?: Maybe<
    | ProjectCommentCreateWithoutProjectInput[]
    | ProjectCommentCreateWithoutProjectInput
  >;
  connect?: Maybe<
    ProjectCommentWhereUniqueInput[] | ProjectCommentWhereUniqueInput
  >;
}

export interface ProjectCommentCreateWithoutProjectInput {
  id?: Maybe<ID_Input>;
  profile: UserProfileCreateOneWithoutCommentsInput;
  comment: String;
  likes?: Maybe<ProjectCommentLikeCreateManyWithoutCommentInput>;
}

export interface UserProfileCreateOneWithoutCommentsInput {
  create?: Maybe<UserProfileCreateWithoutCommentsInput>;
  connect?: Maybe<UserProfileWhereUniqueInput>;
}

export interface UserProfileCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  userAccountId: ID_Input;
  email: String;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  profileImage?: Maybe<String>;
  country?: Maybe<String>;
  address?: Maybe<String>;
  state?: Maybe<String>;
  city?: Maybe<String>;
  zip?: Maybe<Int>;
  aptNumber?: Maybe<String>;
  projects?: Maybe<ProjectCreateManyWithoutProfileInput>;
  likedProjects?: Maybe<ProjectLikeCreateManyWithoutProfileInput>;
  likedComments?: Maybe<ProjectCommentLikeCreateManyWithoutProfileInput>;
}

export interface ProjectCreateManyWithoutProfileInput {
  create?: Maybe<
    ProjectCreateWithoutProfileInput[] | ProjectCreateWithoutProfileInput
  >;
  connect?: Maybe<ProjectWhereUniqueInput[] | ProjectWhereUniqueInput>;
}

export interface ProjectCreateWithoutProfileInput {
  id?: Maybe<ID_Input>;
  featuredImage: String;
  images?: Maybe<ProjectImageCreateManyWithoutProjectInput>;
  name: String;
  description: String;
  country: String;
  address?: Maybe<String>;
  state?: Maybe<String>;
  city?: Maybe<String>;
  zip?: Maybe<Int>;
  goalAmount: Float;
  amountFunded?: Maybe<Float>;
  likes?: Maybe<ProjectLikeCreateManyWithoutProjectInput>;
  comments?: Maybe<ProjectCommentCreateManyWithoutProjectInput>;
}

export interface ProjectLikeCreateManyWithoutProjectInput {
  create?: Maybe<
    | ProjectLikeCreateWithoutProjectInput[]
    | ProjectLikeCreateWithoutProjectInput
  >;
  connect?: Maybe<ProjectLikeWhereUniqueInput[] | ProjectLikeWhereUniqueInput>;
}

export interface ProjectLikeCreateWithoutProjectInput {
  id?: Maybe<ID_Input>;
  profile: UserProfileCreateOneWithoutLikedProjectsInput;
}

export interface UserProfileCreateOneWithoutLikedProjectsInput {
  create?: Maybe<UserProfileCreateWithoutLikedProjectsInput>;
  connect?: Maybe<UserProfileWhereUniqueInput>;
}

export interface UserProfileCreateWithoutLikedProjectsInput {
  id?: Maybe<ID_Input>;
  userAccountId: ID_Input;
  email: String;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  profileImage?: Maybe<String>;
  country?: Maybe<String>;
  address?: Maybe<String>;
  state?: Maybe<String>;
  city?: Maybe<String>;
  zip?: Maybe<Int>;
  aptNumber?: Maybe<String>;
  projects?: Maybe<ProjectCreateManyWithoutProfileInput>;
  comments?: Maybe<ProjectCommentCreateManyWithoutProfileInput>;
  likedComments?: Maybe<ProjectCommentLikeCreateManyWithoutProfileInput>;
}

export interface ProjectCommentCreateManyWithoutProfileInput {
  create?: Maybe<
    | ProjectCommentCreateWithoutProfileInput[]
    | ProjectCommentCreateWithoutProfileInput
  >;
  connect?: Maybe<
    ProjectCommentWhereUniqueInput[] | ProjectCommentWhereUniqueInput
  >;
}

export interface ProjectCommentCreateWithoutProfileInput {
  id?: Maybe<ID_Input>;
  project: ProjectCreateOneWithoutCommentsInput;
  comment: String;
  likes?: Maybe<ProjectCommentLikeCreateManyWithoutCommentInput>;
}

export interface ProjectCreateOneWithoutCommentsInput {
  create?: Maybe<ProjectCreateWithoutCommentsInput>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface ProjectCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  profile: UserProfileCreateOneWithoutProjectsInput;
  featuredImage: String;
  images?: Maybe<ProjectImageCreateManyWithoutProjectInput>;
  name: String;
  description: String;
  country: String;
  address?: Maybe<String>;
  state?: Maybe<String>;
  city?: Maybe<String>;
  zip?: Maybe<Int>;
  goalAmount: Float;
  amountFunded?: Maybe<Float>;
  likes?: Maybe<ProjectLikeCreateManyWithoutProjectInput>;
}

export interface ProjectCommentLikeCreateManyWithoutCommentInput {
  create?: Maybe<
    | ProjectCommentLikeCreateWithoutCommentInput[]
    | ProjectCommentLikeCreateWithoutCommentInput
  >;
  connect?: Maybe<
    ProjectCommentLikeWhereUniqueInput[] | ProjectCommentLikeWhereUniqueInput
  >;
}

export interface ProjectCommentLikeCreateWithoutCommentInput {
  id?: Maybe<ID_Input>;
  profile: UserProfileCreateOneWithoutLikedCommentsInput;
}

export interface UserProfileCreateOneWithoutLikedCommentsInput {
  create?: Maybe<UserProfileCreateWithoutLikedCommentsInput>;
  connect?: Maybe<UserProfileWhereUniqueInput>;
}

export interface UserProfileCreateWithoutLikedCommentsInput {
  id?: Maybe<ID_Input>;
  userAccountId: ID_Input;
  email: String;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  profileImage?: Maybe<String>;
  country?: Maybe<String>;
  address?: Maybe<String>;
  state?: Maybe<String>;
  city?: Maybe<String>;
  zip?: Maybe<Int>;
  aptNumber?: Maybe<String>;
  projects?: Maybe<ProjectCreateManyWithoutProfileInput>;
  likedProjects?: Maybe<ProjectLikeCreateManyWithoutProfileInput>;
  comments?: Maybe<ProjectCommentCreateManyWithoutProfileInput>;
}

export interface ProjectCommentLikeCreateManyWithoutProfileInput {
  create?: Maybe<
    | ProjectCommentLikeCreateWithoutProfileInput[]
    | ProjectCommentLikeCreateWithoutProfileInput
  >;
  connect?: Maybe<
    ProjectCommentLikeWhereUniqueInput[] | ProjectCommentLikeWhereUniqueInput
  >;
}

export interface ProjectCommentLikeCreateWithoutProfileInput {
  id?: Maybe<ID_Input>;
  comment: ProjectCommentCreateOneWithoutLikesInput;
}

export interface ProjectCommentCreateOneWithoutLikesInput {
  create?: Maybe<ProjectCommentCreateWithoutLikesInput>;
  connect?: Maybe<ProjectCommentWhereUniqueInput>;
}

export interface ProjectCommentCreateWithoutLikesInput {
  id?: Maybe<ID_Input>;
  profile: UserProfileCreateOneWithoutCommentsInput;
  project: ProjectCreateOneWithoutCommentsInput;
  comment: String;
}

export interface ProjectUpdateInput {
  profile?: Maybe<UserProfileUpdateOneRequiredWithoutProjectsInput>;
  featuredImage?: Maybe<String>;
  images?: Maybe<ProjectImageUpdateManyWithoutProjectInput>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  country?: Maybe<String>;
  address?: Maybe<String>;
  state?: Maybe<String>;
  city?: Maybe<String>;
  zip?: Maybe<Int>;
  goalAmount?: Maybe<Float>;
  amountFunded?: Maybe<Float>;
  likes?: Maybe<ProjectLikeUpdateManyWithoutProjectInput>;
  comments?: Maybe<ProjectCommentUpdateManyWithoutProjectInput>;
}

export interface UserProfileUpdateOneRequiredWithoutProjectsInput {
  create?: Maybe<UserProfileCreateWithoutProjectsInput>;
  update?: Maybe<UserProfileUpdateWithoutProjectsDataInput>;
  upsert?: Maybe<UserProfileUpsertWithoutProjectsInput>;
  connect?: Maybe<UserProfileWhereUniqueInput>;
}

export interface UserProfileUpdateWithoutProjectsDataInput {
  userAccountId?: Maybe<ID_Input>;
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  profileImage?: Maybe<String>;
  country?: Maybe<String>;
  address?: Maybe<String>;
  state?: Maybe<String>;
  city?: Maybe<String>;
  zip?: Maybe<Int>;
  aptNumber?: Maybe<String>;
  likedProjects?: Maybe<ProjectLikeUpdateManyWithoutProfileInput>;
  comments?: Maybe<ProjectCommentUpdateManyWithoutProfileInput>;
  likedComments?: Maybe<ProjectCommentLikeUpdateManyWithoutProfileInput>;
}

export interface ProjectLikeUpdateManyWithoutProfileInput {
  create?: Maybe<
    | ProjectLikeCreateWithoutProfileInput[]
    | ProjectLikeCreateWithoutProfileInput
  >;
  delete?: Maybe<ProjectLikeWhereUniqueInput[] | ProjectLikeWhereUniqueInput>;
  connect?: Maybe<ProjectLikeWhereUniqueInput[] | ProjectLikeWhereUniqueInput>;
  set?: Maybe<ProjectLikeWhereUniqueInput[] | ProjectLikeWhereUniqueInput>;
  disconnect?: Maybe<
    ProjectLikeWhereUniqueInput[] | ProjectLikeWhereUniqueInput
  >;
  update?: Maybe<
    | ProjectLikeUpdateWithWhereUniqueWithoutProfileInput[]
    | ProjectLikeUpdateWithWhereUniqueWithoutProfileInput
  >;
  upsert?: Maybe<
    | ProjectLikeUpsertWithWhereUniqueWithoutProfileInput[]
    | ProjectLikeUpsertWithWhereUniqueWithoutProfileInput
  >;
  deleteMany?: Maybe<
    ProjectLikeScalarWhereInput[] | ProjectLikeScalarWhereInput
  >;
}

export interface ProjectLikeUpdateWithWhereUniqueWithoutProfileInput {
  where: ProjectLikeWhereUniqueInput;
  data: ProjectLikeUpdateWithoutProfileDataInput;
}

export interface ProjectLikeUpdateWithoutProfileDataInput {
  project?: Maybe<ProjectUpdateOneRequiredWithoutLikesInput>;
}

export interface ProjectUpdateOneRequiredWithoutLikesInput {
  create?: Maybe<ProjectCreateWithoutLikesInput>;
  update?: Maybe<ProjectUpdateWithoutLikesDataInput>;
  upsert?: Maybe<ProjectUpsertWithoutLikesInput>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface ProjectUpdateWithoutLikesDataInput {
  profile?: Maybe<UserProfileUpdateOneRequiredWithoutProjectsInput>;
  featuredImage?: Maybe<String>;
  images?: Maybe<ProjectImageUpdateManyWithoutProjectInput>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  country?: Maybe<String>;
  address?: Maybe<String>;
  state?: Maybe<String>;
  city?: Maybe<String>;
  zip?: Maybe<Int>;
  goalAmount?: Maybe<Float>;
  amountFunded?: Maybe<Float>;
  comments?: Maybe<ProjectCommentUpdateManyWithoutProjectInput>;
}

export interface ProjectImageUpdateManyWithoutProjectInput {
  create?: Maybe<
    | ProjectImageCreateWithoutProjectInput[]
    | ProjectImageCreateWithoutProjectInput
  >;
  delete?: Maybe<ProjectImageWhereUniqueInput[] | ProjectImageWhereUniqueInput>;
  connect?: Maybe<
    ProjectImageWhereUniqueInput[] | ProjectImageWhereUniqueInput
  >;
  set?: Maybe<ProjectImageWhereUniqueInput[] | ProjectImageWhereUniqueInput>;
  disconnect?: Maybe<
    ProjectImageWhereUniqueInput[] | ProjectImageWhereUniqueInput
  >;
  update?: Maybe<
    | ProjectImageUpdateWithWhereUniqueWithoutProjectInput[]
    | ProjectImageUpdateWithWhereUniqueWithoutProjectInput
  >;
  upsert?: Maybe<
    | ProjectImageUpsertWithWhereUniqueWithoutProjectInput[]
    | ProjectImageUpsertWithWhereUniqueWithoutProjectInput
  >;
  deleteMany?: Maybe<
    ProjectImageScalarWhereInput[] | ProjectImageScalarWhereInput
  >;
  updateMany?: Maybe<
    | ProjectImageUpdateManyWithWhereNestedInput[]
    | ProjectImageUpdateManyWithWhereNestedInput
  >;
}

export interface ProjectImageUpdateWithWhereUniqueWithoutProjectInput {
  where: ProjectImageWhereUniqueInput;
  data: ProjectImageUpdateWithoutProjectDataInput;
}

export interface ProjectImageUpdateWithoutProjectDataInput {
  imageUrl?: Maybe<String>;
  deleteImageUrl?: Maybe<String>;
}

export interface ProjectImageUpsertWithWhereUniqueWithoutProjectInput {
  where: ProjectImageWhereUniqueInput;
  update: ProjectImageUpdateWithoutProjectDataInput;
  create: ProjectImageCreateWithoutProjectInput;
}

export interface ProjectImageScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  imageUrl?: Maybe<String>;
  imageUrl_not?: Maybe<String>;
  imageUrl_in?: Maybe<String[] | String>;
  imageUrl_not_in?: Maybe<String[] | String>;
  imageUrl_lt?: Maybe<String>;
  imageUrl_lte?: Maybe<String>;
  imageUrl_gt?: Maybe<String>;
  imageUrl_gte?: Maybe<String>;
  imageUrl_contains?: Maybe<String>;
  imageUrl_not_contains?: Maybe<String>;
  imageUrl_starts_with?: Maybe<String>;
  imageUrl_not_starts_with?: Maybe<String>;
  imageUrl_ends_with?: Maybe<String>;
  imageUrl_not_ends_with?: Maybe<String>;
  deleteImageUrl?: Maybe<String>;
  deleteImageUrl_not?: Maybe<String>;
  deleteImageUrl_in?: Maybe<String[] | String>;
  deleteImageUrl_not_in?: Maybe<String[] | String>;
  deleteImageUrl_lt?: Maybe<String>;
  deleteImageUrl_lte?: Maybe<String>;
  deleteImageUrl_gt?: Maybe<String>;
  deleteImageUrl_gte?: Maybe<String>;
  deleteImageUrl_contains?: Maybe<String>;
  deleteImageUrl_not_contains?: Maybe<String>;
  deleteImageUrl_starts_with?: Maybe<String>;
  deleteImageUrl_not_starts_with?: Maybe<String>;
  deleteImageUrl_ends_with?: Maybe<String>;
  deleteImageUrl_not_ends_with?: Maybe<String>;
  AND?: Maybe<ProjectImageScalarWhereInput[] | ProjectImageScalarWhereInput>;
  OR?: Maybe<ProjectImageScalarWhereInput[] | ProjectImageScalarWhereInput>;
  NOT?: Maybe<ProjectImageScalarWhereInput[] | ProjectImageScalarWhereInput>;
}

export interface ProjectImageUpdateManyWithWhereNestedInput {
  where: ProjectImageScalarWhereInput;
  data: ProjectImageUpdateManyDataInput;
}

export interface ProjectImageUpdateManyDataInput {
  imageUrl?: Maybe<String>;
  deleteImageUrl?: Maybe<String>;
}

export interface ProjectCommentUpdateManyWithoutProjectInput {
  create?: Maybe<
    | ProjectCommentCreateWithoutProjectInput[]
    | ProjectCommentCreateWithoutProjectInput
  >;
  delete?: Maybe<
    ProjectCommentWhereUniqueInput[] | ProjectCommentWhereUniqueInput
  >;
  connect?: Maybe<
    ProjectCommentWhereUniqueInput[] | ProjectCommentWhereUniqueInput
  >;
  set?: Maybe<
    ProjectCommentWhereUniqueInput[] | ProjectCommentWhereUniqueInput
  >;
  disconnect?: Maybe<
    ProjectCommentWhereUniqueInput[] | ProjectCommentWhereUniqueInput
  >;
  update?: Maybe<
    | ProjectCommentUpdateWithWhereUniqueWithoutProjectInput[]
    | ProjectCommentUpdateWithWhereUniqueWithoutProjectInput
  >;
  upsert?: Maybe<
    | ProjectCommentUpsertWithWhereUniqueWithoutProjectInput[]
    | ProjectCommentUpsertWithWhereUniqueWithoutProjectInput
  >;
  deleteMany?: Maybe<
    ProjectCommentScalarWhereInput[] | ProjectCommentScalarWhereInput
  >;
  updateMany?: Maybe<
    | ProjectCommentUpdateManyWithWhereNestedInput[]
    | ProjectCommentUpdateManyWithWhereNestedInput
  >;
}

export interface ProjectCommentUpdateWithWhereUniqueWithoutProjectInput {
  where: ProjectCommentWhereUniqueInput;
  data: ProjectCommentUpdateWithoutProjectDataInput;
}

export interface ProjectCommentUpdateWithoutProjectDataInput {
  profile?: Maybe<UserProfileUpdateOneRequiredWithoutCommentsInput>;
  comment?: Maybe<String>;
  likes?: Maybe<ProjectCommentLikeUpdateManyWithoutCommentInput>;
}

export interface UserProfileUpdateOneRequiredWithoutCommentsInput {
  create?: Maybe<UserProfileCreateWithoutCommentsInput>;
  update?: Maybe<UserProfileUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<UserProfileUpsertWithoutCommentsInput>;
  connect?: Maybe<UserProfileWhereUniqueInput>;
}

export interface UserProfileUpdateWithoutCommentsDataInput {
  userAccountId?: Maybe<ID_Input>;
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  profileImage?: Maybe<String>;
  country?: Maybe<String>;
  address?: Maybe<String>;
  state?: Maybe<String>;
  city?: Maybe<String>;
  zip?: Maybe<Int>;
  aptNumber?: Maybe<String>;
  projects?: Maybe<ProjectUpdateManyWithoutProfileInput>;
  likedProjects?: Maybe<ProjectLikeUpdateManyWithoutProfileInput>;
  likedComments?: Maybe<ProjectCommentLikeUpdateManyWithoutProfileInput>;
}

export interface ProjectUpdateManyWithoutProfileInput {
  create?: Maybe<
    ProjectCreateWithoutProfileInput[] | ProjectCreateWithoutProfileInput
  >;
  delete?: Maybe<ProjectWhereUniqueInput[] | ProjectWhereUniqueInput>;
  connect?: Maybe<ProjectWhereUniqueInput[] | ProjectWhereUniqueInput>;
  set?: Maybe<ProjectWhereUniqueInput[] | ProjectWhereUniqueInput>;
  disconnect?: Maybe<ProjectWhereUniqueInput[] | ProjectWhereUniqueInput>;
  update?: Maybe<
    | ProjectUpdateWithWhereUniqueWithoutProfileInput[]
    | ProjectUpdateWithWhereUniqueWithoutProfileInput
  >;
  upsert?: Maybe<
    | ProjectUpsertWithWhereUniqueWithoutProfileInput[]
    | ProjectUpsertWithWhereUniqueWithoutProfileInput
  >;
  deleteMany?: Maybe<ProjectScalarWhereInput[] | ProjectScalarWhereInput>;
  updateMany?: Maybe<
    | ProjectUpdateManyWithWhereNestedInput[]
    | ProjectUpdateManyWithWhereNestedInput
  >;
}

export interface ProjectUpdateWithWhereUniqueWithoutProfileInput {
  where: ProjectWhereUniqueInput;
  data: ProjectUpdateWithoutProfileDataInput;
}

export interface ProjectUpdateWithoutProfileDataInput {
  featuredImage?: Maybe<String>;
  images?: Maybe<ProjectImageUpdateManyWithoutProjectInput>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  country?: Maybe<String>;
  address?: Maybe<String>;
  state?: Maybe<String>;
  city?: Maybe<String>;
  zip?: Maybe<Int>;
  goalAmount?: Maybe<Float>;
  amountFunded?: Maybe<Float>;
  likes?: Maybe<ProjectLikeUpdateManyWithoutProjectInput>;
  comments?: Maybe<ProjectCommentUpdateManyWithoutProjectInput>;
}

export interface ProjectLikeUpdateManyWithoutProjectInput {
  create?: Maybe<
    | ProjectLikeCreateWithoutProjectInput[]
    | ProjectLikeCreateWithoutProjectInput
  >;
  delete?: Maybe<ProjectLikeWhereUniqueInput[] | ProjectLikeWhereUniqueInput>;
  connect?: Maybe<ProjectLikeWhereUniqueInput[] | ProjectLikeWhereUniqueInput>;
  set?: Maybe<ProjectLikeWhereUniqueInput[] | ProjectLikeWhereUniqueInput>;
  disconnect?: Maybe<
    ProjectLikeWhereUniqueInput[] | ProjectLikeWhereUniqueInput
  >;
  update?: Maybe<
    | ProjectLikeUpdateWithWhereUniqueWithoutProjectInput[]
    | ProjectLikeUpdateWithWhereUniqueWithoutProjectInput
  >;
  upsert?: Maybe<
    | ProjectLikeUpsertWithWhereUniqueWithoutProjectInput[]
    | ProjectLikeUpsertWithWhereUniqueWithoutProjectInput
  >;
  deleteMany?: Maybe<
    ProjectLikeScalarWhereInput[] | ProjectLikeScalarWhereInput
  >;
}

export interface ProjectLikeUpdateWithWhereUniqueWithoutProjectInput {
  where: ProjectLikeWhereUniqueInput;
  data: ProjectLikeUpdateWithoutProjectDataInput;
}

export interface ProjectLikeUpdateWithoutProjectDataInput {
  profile?: Maybe<UserProfileUpdateOneRequiredWithoutLikedProjectsInput>;
}

export interface UserProfileUpdateOneRequiredWithoutLikedProjectsInput {
  create?: Maybe<UserProfileCreateWithoutLikedProjectsInput>;
  update?: Maybe<UserProfileUpdateWithoutLikedProjectsDataInput>;
  upsert?: Maybe<UserProfileUpsertWithoutLikedProjectsInput>;
  connect?: Maybe<UserProfileWhereUniqueInput>;
}

export interface UserProfileUpdateWithoutLikedProjectsDataInput {
  userAccountId?: Maybe<ID_Input>;
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  profileImage?: Maybe<String>;
  country?: Maybe<String>;
  address?: Maybe<String>;
  state?: Maybe<String>;
  city?: Maybe<String>;
  zip?: Maybe<Int>;
  aptNumber?: Maybe<String>;
  projects?: Maybe<ProjectUpdateManyWithoutProfileInput>;
  comments?: Maybe<ProjectCommentUpdateManyWithoutProfileInput>;
  likedComments?: Maybe<ProjectCommentLikeUpdateManyWithoutProfileInput>;
}

export interface ProjectCommentUpdateManyWithoutProfileInput {
  create?: Maybe<
    | ProjectCommentCreateWithoutProfileInput[]
    | ProjectCommentCreateWithoutProfileInput
  >;
  delete?: Maybe<
    ProjectCommentWhereUniqueInput[] | ProjectCommentWhereUniqueInput
  >;
  connect?: Maybe<
    ProjectCommentWhereUniqueInput[] | ProjectCommentWhereUniqueInput
  >;
  set?: Maybe<
    ProjectCommentWhereUniqueInput[] | ProjectCommentWhereUniqueInput
  >;
  disconnect?: Maybe<
    ProjectCommentWhereUniqueInput[] | ProjectCommentWhereUniqueInput
  >;
  update?: Maybe<
    | ProjectCommentUpdateWithWhereUniqueWithoutProfileInput[]
    | ProjectCommentUpdateWithWhereUniqueWithoutProfileInput
  >;
  upsert?: Maybe<
    | ProjectCommentUpsertWithWhereUniqueWithoutProfileInput[]
    | ProjectCommentUpsertWithWhereUniqueWithoutProfileInput
  >;
  deleteMany?: Maybe<
    ProjectCommentScalarWhereInput[] | ProjectCommentScalarWhereInput
  >;
  updateMany?: Maybe<
    | ProjectCommentUpdateManyWithWhereNestedInput[]
    | ProjectCommentUpdateManyWithWhereNestedInput
  >;
}

export interface ProjectCommentUpdateWithWhereUniqueWithoutProfileInput {
  where: ProjectCommentWhereUniqueInput;
  data: ProjectCommentUpdateWithoutProfileDataInput;
}

export interface ProjectCommentUpdateWithoutProfileDataInput {
  project?: Maybe<ProjectUpdateOneRequiredWithoutCommentsInput>;
  comment?: Maybe<String>;
  likes?: Maybe<ProjectCommentLikeUpdateManyWithoutCommentInput>;
}

export interface ProjectUpdateOneRequiredWithoutCommentsInput {
  create?: Maybe<ProjectCreateWithoutCommentsInput>;
  update?: Maybe<ProjectUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<ProjectUpsertWithoutCommentsInput>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface ProjectUpdateWithoutCommentsDataInput {
  profile?: Maybe<UserProfileUpdateOneRequiredWithoutProjectsInput>;
  featuredImage?: Maybe<String>;
  images?: Maybe<ProjectImageUpdateManyWithoutProjectInput>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  country?: Maybe<String>;
  address?: Maybe<String>;
  state?: Maybe<String>;
  city?: Maybe<String>;
  zip?: Maybe<Int>;
  goalAmount?: Maybe<Float>;
  amountFunded?: Maybe<Float>;
  likes?: Maybe<ProjectLikeUpdateManyWithoutProjectInput>;
}

export interface ProjectUpsertWithoutCommentsInput {
  update: ProjectUpdateWithoutCommentsDataInput;
  create: ProjectCreateWithoutCommentsInput;
}

export interface ProjectCommentLikeUpdateManyWithoutCommentInput {
  create?: Maybe<
    | ProjectCommentLikeCreateWithoutCommentInput[]
    | ProjectCommentLikeCreateWithoutCommentInput
  >;
  delete?: Maybe<
    ProjectCommentLikeWhereUniqueInput[] | ProjectCommentLikeWhereUniqueInput
  >;
  connect?: Maybe<
    ProjectCommentLikeWhereUniqueInput[] | ProjectCommentLikeWhereUniqueInput
  >;
  set?: Maybe<
    ProjectCommentLikeWhereUniqueInput[] | ProjectCommentLikeWhereUniqueInput
  >;
  disconnect?: Maybe<
    ProjectCommentLikeWhereUniqueInput[] | ProjectCommentLikeWhereUniqueInput
  >;
  update?: Maybe<
    | ProjectCommentLikeUpdateWithWhereUniqueWithoutCommentInput[]
    | ProjectCommentLikeUpdateWithWhereUniqueWithoutCommentInput
  >;
  upsert?: Maybe<
    | ProjectCommentLikeUpsertWithWhereUniqueWithoutCommentInput[]
    | ProjectCommentLikeUpsertWithWhereUniqueWithoutCommentInput
  >;
  deleteMany?: Maybe<
    ProjectCommentLikeScalarWhereInput[] | ProjectCommentLikeScalarWhereInput
  >;
}

export interface ProjectCommentLikeUpdateWithWhereUniqueWithoutCommentInput {
  where: ProjectCommentLikeWhereUniqueInput;
  data: ProjectCommentLikeUpdateWithoutCommentDataInput;
}

export interface ProjectCommentLikeUpdateWithoutCommentDataInput {
  profile?: Maybe<UserProfileUpdateOneRequiredWithoutLikedCommentsInput>;
}

export interface UserProfileUpdateOneRequiredWithoutLikedCommentsInput {
  create?: Maybe<UserProfileCreateWithoutLikedCommentsInput>;
  update?: Maybe<UserProfileUpdateWithoutLikedCommentsDataInput>;
  upsert?: Maybe<UserProfileUpsertWithoutLikedCommentsInput>;
  connect?: Maybe<UserProfileWhereUniqueInput>;
}

export interface UserProfileUpdateWithoutLikedCommentsDataInput {
  userAccountId?: Maybe<ID_Input>;
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  profileImage?: Maybe<String>;
  country?: Maybe<String>;
  address?: Maybe<String>;
  state?: Maybe<String>;
  city?: Maybe<String>;
  zip?: Maybe<Int>;
  aptNumber?: Maybe<String>;
  projects?: Maybe<ProjectUpdateManyWithoutProfileInput>;
  likedProjects?: Maybe<ProjectLikeUpdateManyWithoutProfileInput>;
  comments?: Maybe<ProjectCommentUpdateManyWithoutProfileInput>;
}

export interface UserProfileUpsertWithoutLikedCommentsInput {
  update: UserProfileUpdateWithoutLikedCommentsDataInput;
  create: UserProfileCreateWithoutLikedCommentsInput;
}

export interface ProjectCommentLikeUpsertWithWhereUniqueWithoutCommentInput {
  where: ProjectCommentLikeWhereUniqueInput;
  update: ProjectCommentLikeUpdateWithoutCommentDataInput;
  create: ProjectCommentLikeCreateWithoutCommentInput;
}

export interface ProjectCommentLikeScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    ProjectCommentLikeScalarWhereInput[] | ProjectCommentLikeScalarWhereInput
  >;
  OR?: Maybe<
    ProjectCommentLikeScalarWhereInput[] | ProjectCommentLikeScalarWhereInput
  >;
  NOT?: Maybe<
    ProjectCommentLikeScalarWhereInput[] | ProjectCommentLikeScalarWhereInput
  >;
}

export interface ProjectCommentUpsertWithWhereUniqueWithoutProfileInput {
  where: ProjectCommentWhereUniqueInput;
  update: ProjectCommentUpdateWithoutProfileDataInput;
  create: ProjectCommentCreateWithoutProfileInput;
}

export interface ProjectCommentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  comment?: Maybe<String>;
  comment_not?: Maybe<String>;
  comment_in?: Maybe<String[] | String>;
  comment_not_in?: Maybe<String[] | String>;
  comment_lt?: Maybe<String>;
  comment_lte?: Maybe<String>;
  comment_gt?: Maybe<String>;
  comment_gte?: Maybe<String>;
  comment_contains?: Maybe<String>;
  comment_not_contains?: Maybe<String>;
  comment_starts_with?: Maybe<String>;
  comment_not_starts_with?: Maybe<String>;
  comment_ends_with?: Maybe<String>;
  comment_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    ProjectCommentScalarWhereInput[] | ProjectCommentScalarWhereInput
  >;
  OR?: Maybe<ProjectCommentScalarWhereInput[] | ProjectCommentScalarWhereInput>;
  NOT?: Maybe<
    ProjectCommentScalarWhereInput[] | ProjectCommentScalarWhereInput
  >;
}

export interface ProjectCommentUpdateManyWithWhereNestedInput {
  where: ProjectCommentScalarWhereInput;
  data: ProjectCommentUpdateManyDataInput;
}

export interface ProjectCommentUpdateManyDataInput {
  comment?: Maybe<String>;
}

export interface ProjectCommentLikeUpdateManyWithoutProfileInput {
  create?: Maybe<
    | ProjectCommentLikeCreateWithoutProfileInput[]
    | ProjectCommentLikeCreateWithoutProfileInput
  >;
  delete?: Maybe<
    ProjectCommentLikeWhereUniqueInput[] | ProjectCommentLikeWhereUniqueInput
  >;
  connect?: Maybe<
    ProjectCommentLikeWhereUniqueInput[] | ProjectCommentLikeWhereUniqueInput
  >;
  set?: Maybe<
    ProjectCommentLikeWhereUniqueInput[] | ProjectCommentLikeWhereUniqueInput
  >;
  disconnect?: Maybe<
    ProjectCommentLikeWhereUniqueInput[] | ProjectCommentLikeWhereUniqueInput
  >;
  update?: Maybe<
    | ProjectCommentLikeUpdateWithWhereUniqueWithoutProfileInput[]
    | ProjectCommentLikeUpdateWithWhereUniqueWithoutProfileInput
  >;
  upsert?: Maybe<
    | ProjectCommentLikeUpsertWithWhereUniqueWithoutProfileInput[]
    | ProjectCommentLikeUpsertWithWhereUniqueWithoutProfileInput
  >;
  deleteMany?: Maybe<
    ProjectCommentLikeScalarWhereInput[] | ProjectCommentLikeScalarWhereInput
  >;
}

export interface ProjectCommentLikeUpdateWithWhereUniqueWithoutProfileInput {
  where: ProjectCommentLikeWhereUniqueInput;
  data: ProjectCommentLikeUpdateWithoutProfileDataInput;
}

export interface ProjectCommentLikeUpdateWithoutProfileDataInput {
  comment?: Maybe<ProjectCommentUpdateOneRequiredWithoutLikesInput>;
}

export interface ProjectCommentUpdateOneRequiredWithoutLikesInput {
  create?: Maybe<ProjectCommentCreateWithoutLikesInput>;
  update?: Maybe<ProjectCommentUpdateWithoutLikesDataInput>;
  upsert?: Maybe<ProjectCommentUpsertWithoutLikesInput>;
  connect?: Maybe<ProjectCommentWhereUniqueInput>;
}

export interface ProjectCommentUpdateWithoutLikesDataInput {
  profile?: Maybe<UserProfileUpdateOneRequiredWithoutCommentsInput>;
  project?: Maybe<ProjectUpdateOneRequiredWithoutCommentsInput>;
  comment?: Maybe<String>;
}

export interface ProjectCommentUpsertWithoutLikesInput {
  update: ProjectCommentUpdateWithoutLikesDataInput;
  create: ProjectCommentCreateWithoutLikesInput;
}

export interface ProjectCommentLikeUpsertWithWhereUniqueWithoutProfileInput {
  where: ProjectCommentLikeWhereUniqueInput;
  update: ProjectCommentLikeUpdateWithoutProfileDataInput;
  create: ProjectCommentLikeCreateWithoutProfileInput;
}

export interface UserProfileUpsertWithoutLikedProjectsInput {
  update: UserProfileUpdateWithoutLikedProjectsDataInput;
  create: UserProfileCreateWithoutLikedProjectsInput;
}

export interface ProjectLikeUpsertWithWhereUniqueWithoutProjectInput {
  where: ProjectLikeWhereUniqueInput;
  update: ProjectLikeUpdateWithoutProjectDataInput;
  create: ProjectLikeCreateWithoutProjectInput;
}

export interface ProjectLikeScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ProjectLikeScalarWhereInput[] | ProjectLikeScalarWhereInput>;
  OR?: Maybe<ProjectLikeScalarWhereInput[] | ProjectLikeScalarWhereInput>;
  NOT?: Maybe<ProjectLikeScalarWhereInput[] | ProjectLikeScalarWhereInput>;
}

export interface ProjectUpsertWithWhereUniqueWithoutProfileInput {
  where: ProjectWhereUniqueInput;
  update: ProjectUpdateWithoutProfileDataInput;
  create: ProjectCreateWithoutProfileInput;
}

export interface ProjectScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  featuredImage?: Maybe<String>;
  featuredImage_not?: Maybe<String>;
  featuredImage_in?: Maybe<String[] | String>;
  featuredImage_not_in?: Maybe<String[] | String>;
  featuredImage_lt?: Maybe<String>;
  featuredImage_lte?: Maybe<String>;
  featuredImage_gt?: Maybe<String>;
  featuredImage_gte?: Maybe<String>;
  featuredImage_contains?: Maybe<String>;
  featuredImage_not_contains?: Maybe<String>;
  featuredImage_starts_with?: Maybe<String>;
  featuredImage_not_starts_with?: Maybe<String>;
  featuredImage_ends_with?: Maybe<String>;
  featuredImage_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  country?: Maybe<String>;
  country_not?: Maybe<String>;
  country_in?: Maybe<String[] | String>;
  country_not_in?: Maybe<String[] | String>;
  country_lt?: Maybe<String>;
  country_lte?: Maybe<String>;
  country_gt?: Maybe<String>;
  country_gte?: Maybe<String>;
  country_contains?: Maybe<String>;
  country_not_contains?: Maybe<String>;
  country_starts_with?: Maybe<String>;
  country_not_starts_with?: Maybe<String>;
  country_ends_with?: Maybe<String>;
  country_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  zip?: Maybe<Int>;
  zip_not?: Maybe<Int>;
  zip_in?: Maybe<Int[] | Int>;
  zip_not_in?: Maybe<Int[] | Int>;
  zip_lt?: Maybe<Int>;
  zip_lte?: Maybe<Int>;
  zip_gt?: Maybe<Int>;
  zip_gte?: Maybe<Int>;
  goalAmount?: Maybe<Float>;
  goalAmount_not?: Maybe<Float>;
  goalAmount_in?: Maybe<Float[] | Float>;
  goalAmount_not_in?: Maybe<Float[] | Float>;
  goalAmount_lt?: Maybe<Float>;
  goalAmount_lte?: Maybe<Float>;
  goalAmount_gt?: Maybe<Float>;
  goalAmount_gte?: Maybe<Float>;
  amountFunded?: Maybe<Float>;
  amountFunded_not?: Maybe<Float>;
  amountFunded_in?: Maybe<Float[] | Float>;
  amountFunded_not_in?: Maybe<Float[] | Float>;
  amountFunded_lt?: Maybe<Float>;
  amountFunded_lte?: Maybe<Float>;
  amountFunded_gt?: Maybe<Float>;
  amountFunded_gte?: Maybe<Float>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ProjectScalarWhereInput[] | ProjectScalarWhereInput>;
  OR?: Maybe<ProjectScalarWhereInput[] | ProjectScalarWhereInput>;
  NOT?: Maybe<ProjectScalarWhereInput[] | ProjectScalarWhereInput>;
}

export interface ProjectUpdateManyWithWhereNestedInput {
  where: ProjectScalarWhereInput;
  data: ProjectUpdateManyDataInput;
}

export interface ProjectUpdateManyDataInput {
  featuredImage?: Maybe<String>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  country?: Maybe<String>;
  address?: Maybe<String>;
  state?: Maybe<String>;
  city?: Maybe<String>;
  zip?: Maybe<Int>;
  goalAmount?: Maybe<Float>;
  amountFunded?: Maybe<Float>;
}

export interface UserProfileUpsertWithoutCommentsInput {
  update: UserProfileUpdateWithoutCommentsDataInput;
  create: UserProfileCreateWithoutCommentsInput;
}

export interface ProjectCommentUpsertWithWhereUniqueWithoutProjectInput {
  where: ProjectCommentWhereUniqueInput;
  update: ProjectCommentUpdateWithoutProjectDataInput;
  create: ProjectCommentCreateWithoutProjectInput;
}

export interface ProjectUpsertWithoutLikesInput {
  update: ProjectUpdateWithoutLikesDataInput;
  create: ProjectCreateWithoutLikesInput;
}

export interface ProjectLikeUpsertWithWhereUniqueWithoutProfileInput {
  where: ProjectLikeWhereUniqueInput;
  update: ProjectLikeUpdateWithoutProfileDataInput;
  create: ProjectLikeCreateWithoutProfileInput;
}

export interface UserProfileUpsertWithoutProjectsInput {
  update: UserProfileUpdateWithoutProjectsDataInput;
  create: UserProfileCreateWithoutProjectsInput;
}

export interface ProjectUpdateManyMutationInput {
  featuredImage?: Maybe<String>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  country?: Maybe<String>;
  address?: Maybe<String>;
  state?: Maybe<String>;
  city?: Maybe<String>;
  zip?: Maybe<Int>;
  goalAmount?: Maybe<Float>;
  amountFunded?: Maybe<Float>;
}

export interface ProjectCommentCreateInput {
  id?: Maybe<ID_Input>;
  profile: UserProfileCreateOneWithoutCommentsInput;
  project: ProjectCreateOneWithoutCommentsInput;
  comment: String;
  likes?: Maybe<ProjectCommentLikeCreateManyWithoutCommentInput>;
}

export interface ProjectCommentUpdateInput {
  profile?: Maybe<UserProfileUpdateOneRequiredWithoutCommentsInput>;
  project?: Maybe<ProjectUpdateOneRequiredWithoutCommentsInput>;
  comment?: Maybe<String>;
  likes?: Maybe<ProjectCommentLikeUpdateManyWithoutCommentInput>;
}

export interface ProjectCommentUpdateManyMutationInput {
  comment?: Maybe<String>;
}

export interface ProjectCommentLikeCreateInput {
  id?: Maybe<ID_Input>;
  profile: UserProfileCreateOneWithoutLikedCommentsInput;
  comment: ProjectCommentCreateOneWithoutLikesInput;
}

export interface ProjectCommentLikeUpdateInput {
  profile?: Maybe<UserProfileUpdateOneRequiredWithoutLikedCommentsInput>;
  comment?: Maybe<ProjectCommentUpdateOneRequiredWithoutLikesInput>;
}

export interface ProjectImageCreateInput {
  id?: Maybe<ID_Input>;
  project: ProjectCreateOneWithoutImagesInput;
  imageUrl: String;
  deleteImageUrl: String;
}

export interface ProjectCreateOneWithoutImagesInput {
  create?: Maybe<ProjectCreateWithoutImagesInput>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface ProjectCreateWithoutImagesInput {
  id?: Maybe<ID_Input>;
  profile: UserProfileCreateOneWithoutProjectsInput;
  featuredImage: String;
  name: String;
  description: String;
  country: String;
  address?: Maybe<String>;
  state?: Maybe<String>;
  city?: Maybe<String>;
  zip?: Maybe<Int>;
  goalAmount: Float;
  amountFunded?: Maybe<Float>;
  likes?: Maybe<ProjectLikeCreateManyWithoutProjectInput>;
  comments?: Maybe<ProjectCommentCreateManyWithoutProjectInput>;
}

export interface ProjectImageUpdateInput {
  project?: Maybe<ProjectUpdateOneRequiredWithoutImagesInput>;
  imageUrl?: Maybe<String>;
  deleteImageUrl?: Maybe<String>;
}

export interface ProjectUpdateOneRequiredWithoutImagesInput {
  create?: Maybe<ProjectCreateWithoutImagesInput>;
  update?: Maybe<ProjectUpdateWithoutImagesDataInput>;
  upsert?: Maybe<ProjectUpsertWithoutImagesInput>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface ProjectUpdateWithoutImagesDataInput {
  profile?: Maybe<UserProfileUpdateOneRequiredWithoutProjectsInput>;
  featuredImage?: Maybe<String>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  country?: Maybe<String>;
  address?: Maybe<String>;
  state?: Maybe<String>;
  city?: Maybe<String>;
  zip?: Maybe<Int>;
  goalAmount?: Maybe<Float>;
  amountFunded?: Maybe<Float>;
  likes?: Maybe<ProjectLikeUpdateManyWithoutProjectInput>;
  comments?: Maybe<ProjectCommentUpdateManyWithoutProjectInput>;
}

export interface ProjectUpsertWithoutImagesInput {
  update: ProjectUpdateWithoutImagesDataInput;
  create: ProjectCreateWithoutImagesInput;
}

export interface ProjectImageUpdateManyMutationInput {
  imageUrl?: Maybe<String>;
  deleteImageUrl?: Maybe<String>;
}

export interface ProjectLikeCreateInput {
  id?: Maybe<ID_Input>;
  profile: UserProfileCreateOneWithoutLikedProjectsInput;
  project: ProjectCreateOneWithoutLikesInput;
}

export interface ProjectLikeUpdateInput {
  profile?: Maybe<UserProfileUpdateOneRequiredWithoutLikedProjectsInput>;
  project?: Maybe<ProjectUpdateOneRequiredWithoutLikesInput>;
}

export interface UserAccountCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
}

export interface UserAccountUpdateInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface UserAccountUpdateManyMutationInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface UserProfileCreateInput {
  id?: Maybe<ID_Input>;
  userAccountId: ID_Input;
  email: String;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  profileImage?: Maybe<String>;
  country?: Maybe<String>;
  address?: Maybe<String>;
  state?: Maybe<String>;
  city?: Maybe<String>;
  zip?: Maybe<Int>;
  aptNumber?: Maybe<String>;
  projects?: Maybe<ProjectCreateManyWithoutProfileInput>;
  likedProjects?: Maybe<ProjectLikeCreateManyWithoutProfileInput>;
  comments?: Maybe<ProjectCommentCreateManyWithoutProfileInput>;
  likedComments?: Maybe<ProjectCommentLikeCreateManyWithoutProfileInput>;
}

export interface UserProfileUpdateInput {
  userAccountId?: Maybe<ID_Input>;
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  profileImage?: Maybe<String>;
  country?: Maybe<String>;
  address?: Maybe<String>;
  state?: Maybe<String>;
  city?: Maybe<String>;
  zip?: Maybe<Int>;
  aptNumber?: Maybe<String>;
  projects?: Maybe<ProjectUpdateManyWithoutProfileInput>;
  likedProjects?: Maybe<ProjectLikeUpdateManyWithoutProfileInput>;
  comments?: Maybe<ProjectCommentUpdateManyWithoutProfileInput>;
  likedComments?: Maybe<ProjectCommentLikeUpdateManyWithoutProfileInput>;
}

export interface UserProfileUpdateManyMutationInput {
  userAccountId?: Maybe<ID_Input>;
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  profileImage?: Maybe<String>;
  country?: Maybe<String>;
  address?: Maybe<String>;
  state?: Maybe<String>;
  city?: Maybe<String>;
  zip?: Maybe<Int>;
  aptNumber?: Maybe<String>;
}

export interface ExternalAccountSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ExternalAccountWhereInput>;
  AND?: Maybe<
    | ExternalAccountSubscriptionWhereInput[]
    | ExternalAccountSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ExternalAccountSubscriptionWhereInput[]
    | ExternalAccountSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ExternalAccountSubscriptionWhereInput[]
    | ExternalAccountSubscriptionWhereInput
  >;
}

export interface ProjectSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProjectWhereInput>;
  AND?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
  OR?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
  NOT?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
}

export interface ProjectCommentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProjectCommentWhereInput>;
  AND?: Maybe<
    | ProjectCommentSubscriptionWhereInput[]
    | ProjectCommentSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ProjectCommentSubscriptionWhereInput[]
    | ProjectCommentSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ProjectCommentSubscriptionWhereInput[]
    | ProjectCommentSubscriptionWhereInput
  >;
}

export interface ProjectCommentLikeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProjectCommentLikeWhereInput>;
  AND?: Maybe<
    | ProjectCommentLikeSubscriptionWhereInput[]
    | ProjectCommentLikeSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ProjectCommentLikeSubscriptionWhereInput[]
    | ProjectCommentLikeSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ProjectCommentLikeSubscriptionWhereInput[]
    | ProjectCommentLikeSubscriptionWhereInput
  >;
}

export interface ProjectImageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProjectImageWhereInput>;
  AND?: Maybe<
    ProjectImageSubscriptionWhereInput[] | ProjectImageSubscriptionWhereInput
  >;
  OR?: Maybe<
    ProjectImageSubscriptionWhereInput[] | ProjectImageSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ProjectImageSubscriptionWhereInput[] | ProjectImageSubscriptionWhereInput
  >;
}

export interface ProjectLikeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProjectLikeWhereInput>;
  AND?: Maybe<
    ProjectLikeSubscriptionWhereInput[] | ProjectLikeSubscriptionWhereInput
  >;
  OR?: Maybe<
    ProjectLikeSubscriptionWhereInput[] | ProjectLikeSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ProjectLikeSubscriptionWhereInput[] | ProjectLikeSubscriptionWhereInput
  >;
}

export interface UserAccountSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserAccountWhereInput>;
  AND?: Maybe<
    UserAccountSubscriptionWhereInput[] | UserAccountSubscriptionWhereInput
  >;
  OR?: Maybe<
    UserAccountSubscriptionWhereInput[] | UserAccountSubscriptionWhereInput
  >;
  NOT?: Maybe<
    UserAccountSubscriptionWhereInput[] | UserAccountSubscriptionWhereInput
  >;
}

export interface UserProfileSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserProfileWhereInput>;
  AND?: Maybe<
    UserProfileSubscriptionWhereInput[] | UserProfileSubscriptionWhereInput
  >;
  OR?: Maybe<
    UserProfileSubscriptionWhereInput[] | UserProfileSubscriptionWhereInput
  >;
  NOT?: Maybe<
    UserProfileSubscriptionWhereInput[] | UserProfileSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface ExternalAccount {
  id: ID_Output;
  accountId: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ExternalAccountPromise
  extends Promise<ExternalAccount>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  accountId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ExternalAccountSubscription
  extends Promise<AsyncIterator<ExternalAccount>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  accountId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ExternalAccountNullablePromise
  extends Promise<ExternalAccount | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  accountId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ExternalAccountConnection {
  pageInfo: PageInfo;
  edges: ExternalAccountEdge[];
}

export interface ExternalAccountConnectionPromise
  extends Promise<ExternalAccountConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ExternalAccountEdge>>() => T;
  aggregate: <T = AggregateExternalAccountPromise>() => T;
}

export interface ExternalAccountConnectionSubscription
  extends Promise<AsyncIterator<ExternalAccountConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ExternalAccountEdgeSubscription>>>() => T;
  aggregate: <T = AggregateExternalAccountSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ExternalAccountEdge {
  node: ExternalAccount;
  cursor: String;
}

export interface ExternalAccountEdgePromise
  extends Promise<ExternalAccountEdge>,
    Fragmentable {
  node: <T = ExternalAccountPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ExternalAccountEdgeSubscription
  extends Promise<AsyncIterator<ExternalAccountEdge>>,
    Fragmentable {
  node: <T = ExternalAccountSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateExternalAccount {
  count: Int;
}

export interface AggregateExternalAccountPromise
  extends Promise<AggregateExternalAccount>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateExternalAccountSubscription
  extends Promise<AsyncIterator<AggregateExternalAccount>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Project {
  id: ID_Output;
  featuredImage: String;
  name: String;
  description: String;
  country: String;
  address?: String;
  state?: String;
  city?: String;
  zip?: Int;
  goalAmount: Float;
  amountFunded: Float;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProjectPromise extends Promise<Project>, Fragmentable {
  id: () => Promise<ID_Output>;
  profile: <T = UserProfilePromise>() => T;
  featuredImage: () => Promise<String>;
  images: <T = FragmentableArray<ProjectImage>>(args?: {
    where?: ProjectImageWhereInput;
    orderBy?: ProjectImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  name: () => Promise<String>;
  description: () => Promise<String>;
  country: () => Promise<String>;
  address: () => Promise<String>;
  state: () => Promise<String>;
  city: () => Promise<String>;
  zip: () => Promise<Int>;
  goalAmount: () => Promise<Float>;
  amountFunded: () => Promise<Float>;
  likes: <T = FragmentableArray<ProjectLike>>(args?: {
    where?: ProjectLikeWhereInput;
    orderBy?: ProjectLikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<ProjectComment>>(args?: {
    where?: ProjectCommentWhereInput;
    orderBy?: ProjectCommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProjectSubscription
  extends Promise<AsyncIterator<Project>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  profile: <T = UserProfileSubscription>() => T;
  featuredImage: () => Promise<AsyncIterator<String>>;
  images: <T = Promise<AsyncIterator<ProjectImageSubscription>>>(args?: {
    where?: ProjectImageWhereInput;
    orderBy?: ProjectImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<Int>>;
  goalAmount: () => Promise<AsyncIterator<Float>>;
  amountFunded: () => Promise<AsyncIterator<Float>>;
  likes: <T = Promise<AsyncIterator<ProjectLikeSubscription>>>(args?: {
    where?: ProjectLikeWhereInput;
    orderBy?: ProjectLikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = Promise<AsyncIterator<ProjectCommentSubscription>>>(args?: {
    where?: ProjectCommentWhereInput;
    orderBy?: ProjectCommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProjectNullablePromise
  extends Promise<Project | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  profile: <T = UserProfilePromise>() => T;
  featuredImage: () => Promise<String>;
  images: <T = FragmentableArray<ProjectImage>>(args?: {
    where?: ProjectImageWhereInput;
    orderBy?: ProjectImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  name: () => Promise<String>;
  description: () => Promise<String>;
  country: () => Promise<String>;
  address: () => Promise<String>;
  state: () => Promise<String>;
  city: () => Promise<String>;
  zip: () => Promise<Int>;
  goalAmount: () => Promise<Float>;
  amountFunded: () => Promise<Float>;
  likes: <T = FragmentableArray<ProjectLike>>(args?: {
    where?: ProjectLikeWhereInput;
    orderBy?: ProjectLikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<ProjectComment>>(args?: {
    where?: ProjectCommentWhereInput;
    orderBy?: ProjectCommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserProfile {
  id: ID_Output;
  userAccountId: ID_Output;
  email: String;
  firstName?: String;
  lastName?: String;
  profileImage?: String;
  country?: String;
  address?: String;
  state?: String;
  city?: String;
  zip?: Int;
  aptNumber?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserProfilePromise extends Promise<UserProfile>, Fragmentable {
  id: () => Promise<ID_Output>;
  userAccountId: () => Promise<ID_Output>;
  email: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  profileImage: () => Promise<String>;
  country: () => Promise<String>;
  address: () => Promise<String>;
  state: () => Promise<String>;
  city: () => Promise<String>;
  zip: () => Promise<Int>;
  aptNumber: () => Promise<String>;
  projects: <T = FragmentableArray<Project>>(args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likedProjects: <T = FragmentableArray<ProjectLike>>(args?: {
    where?: ProjectLikeWhereInput;
    orderBy?: ProjectLikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<ProjectComment>>(args?: {
    where?: ProjectCommentWhereInput;
    orderBy?: ProjectCommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likedComments: <T = FragmentableArray<ProjectCommentLike>>(args?: {
    where?: ProjectCommentLikeWhereInput;
    orderBy?: ProjectCommentLikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserProfileSubscription
  extends Promise<AsyncIterator<UserProfile>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userAccountId: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  profileImage: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<Int>>;
  aptNumber: () => Promise<AsyncIterator<String>>;
  projects: <T = Promise<AsyncIterator<ProjectSubscription>>>(args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likedProjects: <T = Promise<AsyncIterator<ProjectLikeSubscription>>>(args?: {
    where?: ProjectLikeWhereInput;
    orderBy?: ProjectLikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = Promise<AsyncIterator<ProjectCommentSubscription>>>(args?: {
    where?: ProjectCommentWhereInput;
    orderBy?: ProjectCommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likedComments: <
    T = Promise<AsyncIterator<ProjectCommentLikeSubscription>>
  >(args?: {
    where?: ProjectCommentLikeWhereInput;
    orderBy?: ProjectCommentLikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserProfileNullablePromise
  extends Promise<UserProfile | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userAccountId: () => Promise<ID_Output>;
  email: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  profileImage: () => Promise<String>;
  country: () => Promise<String>;
  address: () => Promise<String>;
  state: () => Promise<String>;
  city: () => Promise<String>;
  zip: () => Promise<Int>;
  aptNumber: () => Promise<String>;
  projects: <T = FragmentableArray<Project>>(args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likedProjects: <T = FragmentableArray<ProjectLike>>(args?: {
    where?: ProjectLikeWhereInput;
    orderBy?: ProjectLikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<ProjectComment>>(args?: {
    where?: ProjectCommentWhereInput;
    orderBy?: ProjectCommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  likedComments: <T = FragmentableArray<ProjectCommentLike>>(args?: {
    where?: ProjectCommentLikeWhereInput;
    orderBy?: ProjectCommentLikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProjectLike {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProjectLikePromise extends Promise<ProjectLike>, Fragmentable {
  id: () => Promise<ID_Output>;
  profile: <T = UserProfilePromise>() => T;
  project: <T = ProjectPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProjectLikeSubscription
  extends Promise<AsyncIterator<ProjectLike>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  profile: <T = UserProfileSubscription>() => T;
  project: <T = ProjectSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProjectLikeNullablePromise
  extends Promise<ProjectLike | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  profile: <T = UserProfilePromise>() => T;
  project: <T = ProjectPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProjectComment {
  id: ID_Output;
  comment: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProjectCommentPromise
  extends Promise<ProjectComment>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  profile: <T = UserProfilePromise>() => T;
  project: <T = ProjectPromise>() => T;
  comment: () => Promise<String>;
  likes: <T = FragmentableArray<ProjectCommentLike>>(args?: {
    where?: ProjectCommentLikeWhereInput;
    orderBy?: ProjectCommentLikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProjectCommentSubscription
  extends Promise<AsyncIterator<ProjectComment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  profile: <T = UserProfileSubscription>() => T;
  project: <T = ProjectSubscription>() => T;
  comment: () => Promise<AsyncIterator<String>>;
  likes: <T = Promise<AsyncIterator<ProjectCommentLikeSubscription>>>(args?: {
    where?: ProjectCommentLikeWhereInput;
    orderBy?: ProjectCommentLikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProjectCommentNullablePromise
  extends Promise<ProjectComment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  profile: <T = UserProfilePromise>() => T;
  project: <T = ProjectPromise>() => T;
  comment: () => Promise<String>;
  likes: <T = FragmentableArray<ProjectCommentLike>>(args?: {
    where?: ProjectCommentLikeWhereInput;
    orderBy?: ProjectCommentLikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProjectCommentLike {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProjectCommentLikePromise
  extends Promise<ProjectCommentLike>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  profile: <T = UserProfilePromise>() => T;
  comment: <T = ProjectCommentPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProjectCommentLikeSubscription
  extends Promise<AsyncIterator<ProjectCommentLike>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  profile: <T = UserProfileSubscription>() => T;
  comment: <T = ProjectCommentSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProjectCommentLikeNullablePromise
  extends Promise<ProjectCommentLike | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  profile: <T = UserProfilePromise>() => T;
  comment: <T = ProjectCommentPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProjectImage {
  id: ID_Output;
  imageUrl: String;
  deleteImageUrl: String;
}

export interface ProjectImagePromise
  extends Promise<ProjectImage>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  project: <T = ProjectPromise>() => T;
  imageUrl: () => Promise<String>;
  deleteImageUrl: () => Promise<String>;
}

export interface ProjectImageSubscription
  extends Promise<AsyncIterator<ProjectImage>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  project: <T = ProjectSubscription>() => T;
  imageUrl: () => Promise<AsyncIterator<String>>;
  deleteImageUrl: () => Promise<AsyncIterator<String>>;
}

export interface ProjectImageNullablePromise
  extends Promise<ProjectImage | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  project: <T = ProjectPromise>() => T;
  imageUrl: () => Promise<String>;
  deleteImageUrl: () => Promise<String>;
}

export interface ProjectConnection {
  pageInfo: PageInfo;
  edges: ProjectEdge[];
}

export interface ProjectConnectionPromise
  extends Promise<ProjectConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProjectEdge>>() => T;
  aggregate: <T = AggregateProjectPromise>() => T;
}

export interface ProjectConnectionSubscription
  extends Promise<AsyncIterator<ProjectConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProjectEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProjectSubscription>() => T;
}

export interface ProjectEdge {
  node: Project;
  cursor: String;
}

export interface ProjectEdgePromise extends Promise<ProjectEdge>, Fragmentable {
  node: <T = ProjectPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProjectEdgeSubscription
  extends Promise<AsyncIterator<ProjectEdge>>,
    Fragmentable {
  node: <T = ProjectSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProject {
  count: Int;
}

export interface AggregateProjectPromise
  extends Promise<AggregateProject>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProjectSubscription
  extends Promise<AsyncIterator<AggregateProject>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProjectCommentConnection {
  pageInfo: PageInfo;
  edges: ProjectCommentEdge[];
}

export interface ProjectCommentConnectionPromise
  extends Promise<ProjectCommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProjectCommentEdge>>() => T;
  aggregate: <T = AggregateProjectCommentPromise>() => T;
}

export interface ProjectCommentConnectionSubscription
  extends Promise<AsyncIterator<ProjectCommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProjectCommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProjectCommentSubscription>() => T;
}

export interface ProjectCommentEdge {
  node: ProjectComment;
  cursor: String;
}

export interface ProjectCommentEdgePromise
  extends Promise<ProjectCommentEdge>,
    Fragmentable {
  node: <T = ProjectCommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProjectCommentEdgeSubscription
  extends Promise<AsyncIterator<ProjectCommentEdge>>,
    Fragmentable {
  node: <T = ProjectCommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProjectComment {
  count: Int;
}

export interface AggregateProjectCommentPromise
  extends Promise<AggregateProjectComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProjectCommentSubscription
  extends Promise<AsyncIterator<AggregateProjectComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProjectCommentLikeConnection {
  pageInfo: PageInfo;
  edges: ProjectCommentLikeEdge[];
}

export interface ProjectCommentLikeConnectionPromise
  extends Promise<ProjectCommentLikeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProjectCommentLikeEdge>>() => T;
  aggregate: <T = AggregateProjectCommentLikePromise>() => T;
}

export interface ProjectCommentLikeConnectionSubscription
  extends Promise<AsyncIterator<ProjectCommentLikeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ProjectCommentLikeEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateProjectCommentLikeSubscription>() => T;
}

export interface ProjectCommentLikeEdge {
  node: ProjectCommentLike;
  cursor: String;
}

export interface ProjectCommentLikeEdgePromise
  extends Promise<ProjectCommentLikeEdge>,
    Fragmentable {
  node: <T = ProjectCommentLikePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProjectCommentLikeEdgeSubscription
  extends Promise<AsyncIterator<ProjectCommentLikeEdge>>,
    Fragmentable {
  node: <T = ProjectCommentLikeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProjectCommentLike {
  count: Int;
}

export interface AggregateProjectCommentLikePromise
  extends Promise<AggregateProjectCommentLike>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProjectCommentLikeSubscription
  extends Promise<AsyncIterator<AggregateProjectCommentLike>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProjectImageConnection {
  pageInfo: PageInfo;
  edges: ProjectImageEdge[];
}

export interface ProjectImageConnectionPromise
  extends Promise<ProjectImageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProjectImageEdge>>() => T;
  aggregate: <T = AggregateProjectImagePromise>() => T;
}

export interface ProjectImageConnectionSubscription
  extends Promise<AsyncIterator<ProjectImageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProjectImageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProjectImageSubscription>() => T;
}

export interface ProjectImageEdge {
  node: ProjectImage;
  cursor: String;
}

export interface ProjectImageEdgePromise
  extends Promise<ProjectImageEdge>,
    Fragmentable {
  node: <T = ProjectImagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProjectImageEdgeSubscription
  extends Promise<AsyncIterator<ProjectImageEdge>>,
    Fragmentable {
  node: <T = ProjectImageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProjectImage {
  count: Int;
}

export interface AggregateProjectImagePromise
  extends Promise<AggregateProjectImage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProjectImageSubscription
  extends Promise<AsyncIterator<AggregateProjectImage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProjectLikeConnection {
  pageInfo: PageInfo;
  edges: ProjectLikeEdge[];
}

export interface ProjectLikeConnectionPromise
  extends Promise<ProjectLikeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProjectLikeEdge>>() => T;
  aggregate: <T = AggregateProjectLikePromise>() => T;
}

export interface ProjectLikeConnectionSubscription
  extends Promise<AsyncIterator<ProjectLikeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProjectLikeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProjectLikeSubscription>() => T;
}

export interface ProjectLikeEdge {
  node: ProjectLike;
  cursor: String;
}

export interface ProjectLikeEdgePromise
  extends Promise<ProjectLikeEdge>,
    Fragmentable {
  node: <T = ProjectLikePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProjectLikeEdgeSubscription
  extends Promise<AsyncIterator<ProjectLikeEdge>>,
    Fragmentable {
  node: <T = ProjectLikeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProjectLike {
  count: Int;
}

export interface AggregateProjectLikePromise
  extends Promise<AggregateProjectLike>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProjectLikeSubscription
  extends Promise<AsyncIterator<AggregateProjectLike>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserAccount {
  id: ID_Output;
  email: String;
  password: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserAccountPromise extends Promise<UserAccount>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserAccountSubscription
  extends Promise<AsyncIterator<UserAccount>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserAccountNullablePromise
  extends Promise<UserAccount | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserAccountConnection {
  pageInfo: PageInfo;
  edges: UserAccountEdge[];
}

export interface UserAccountConnectionPromise
  extends Promise<UserAccountConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserAccountEdge>>() => T;
  aggregate: <T = AggregateUserAccountPromise>() => T;
}

export interface UserAccountConnectionSubscription
  extends Promise<AsyncIterator<UserAccountConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserAccountEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserAccountSubscription>() => T;
}

export interface UserAccountEdge {
  node: UserAccount;
  cursor: String;
}

export interface UserAccountEdgePromise
  extends Promise<UserAccountEdge>,
    Fragmentable {
  node: <T = UserAccountPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserAccountEdgeSubscription
  extends Promise<AsyncIterator<UserAccountEdge>>,
    Fragmentable {
  node: <T = UserAccountSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserAccount {
  count: Int;
}

export interface AggregateUserAccountPromise
  extends Promise<AggregateUserAccount>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserAccountSubscription
  extends Promise<AsyncIterator<AggregateUserAccount>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserProfileConnection {
  pageInfo: PageInfo;
  edges: UserProfileEdge[];
}

export interface UserProfileConnectionPromise
  extends Promise<UserProfileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserProfileEdge>>() => T;
  aggregate: <T = AggregateUserProfilePromise>() => T;
}

export interface UserProfileConnectionSubscription
  extends Promise<AsyncIterator<UserProfileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserProfileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserProfileSubscription>() => T;
}

export interface UserProfileEdge {
  node: UserProfile;
  cursor: String;
}

export interface UserProfileEdgePromise
  extends Promise<UserProfileEdge>,
    Fragmentable {
  node: <T = UserProfilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserProfileEdgeSubscription
  extends Promise<AsyncIterator<UserProfileEdge>>,
    Fragmentable {
  node: <T = UserProfileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserProfile {
  count: Int;
}

export interface AggregateUserProfilePromise
  extends Promise<AggregateUserProfile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserProfileSubscription
  extends Promise<AsyncIterator<AggregateUserProfile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ExternalAccountSubscriptionPayload {
  mutation: MutationType;
  node: ExternalAccount;
  updatedFields: String[];
  previousValues: ExternalAccountPreviousValues;
}

export interface ExternalAccountSubscriptionPayloadPromise
  extends Promise<ExternalAccountSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ExternalAccountPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ExternalAccountPreviousValuesPromise>() => T;
}

export interface ExternalAccountSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ExternalAccountSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ExternalAccountSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ExternalAccountPreviousValuesSubscription>() => T;
}

export interface ExternalAccountPreviousValues {
  id: ID_Output;
  accountId: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ExternalAccountPreviousValuesPromise
  extends Promise<ExternalAccountPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  accountId: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ExternalAccountPreviousValuesSubscription
  extends Promise<AsyncIterator<ExternalAccountPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  accountId: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProjectSubscriptionPayload {
  mutation: MutationType;
  node: Project;
  updatedFields: String[];
  previousValues: ProjectPreviousValues;
}

export interface ProjectSubscriptionPayloadPromise
  extends Promise<ProjectSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProjectPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProjectPreviousValuesPromise>() => T;
}

export interface ProjectSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProjectSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProjectSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProjectPreviousValuesSubscription>() => T;
}

export interface ProjectPreviousValues {
  id: ID_Output;
  featuredImage: String;
  name: String;
  description: String;
  country: String;
  address?: String;
  state?: String;
  city?: String;
  zip?: Int;
  goalAmount: Float;
  amountFunded: Float;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProjectPreviousValuesPromise
  extends Promise<ProjectPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  featuredImage: () => Promise<String>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  country: () => Promise<String>;
  address: () => Promise<String>;
  state: () => Promise<String>;
  city: () => Promise<String>;
  zip: () => Promise<Int>;
  goalAmount: () => Promise<Float>;
  amountFunded: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProjectPreviousValuesSubscription
  extends Promise<AsyncIterator<ProjectPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  featuredImage: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<Int>>;
  goalAmount: () => Promise<AsyncIterator<Float>>;
  amountFunded: () => Promise<AsyncIterator<Float>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProjectCommentSubscriptionPayload {
  mutation: MutationType;
  node: ProjectComment;
  updatedFields: String[];
  previousValues: ProjectCommentPreviousValues;
}

export interface ProjectCommentSubscriptionPayloadPromise
  extends Promise<ProjectCommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProjectCommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProjectCommentPreviousValuesPromise>() => T;
}

export interface ProjectCommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProjectCommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProjectCommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProjectCommentPreviousValuesSubscription>() => T;
}

export interface ProjectCommentPreviousValues {
  id: ID_Output;
  comment: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProjectCommentPreviousValuesPromise
  extends Promise<ProjectCommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  comment: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProjectCommentPreviousValuesSubscription
  extends Promise<AsyncIterator<ProjectCommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  comment: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProjectCommentLikeSubscriptionPayload {
  mutation: MutationType;
  node: ProjectCommentLike;
  updatedFields: String[];
  previousValues: ProjectCommentLikePreviousValues;
}

export interface ProjectCommentLikeSubscriptionPayloadPromise
  extends Promise<ProjectCommentLikeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProjectCommentLikePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProjectCommentLikePreviousValuesPromise>() => T;
}

export interface ProjectCommentLikeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProjectCommentLikeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProjectCommentLikeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProjectCommentLikePreviousValuesSubscription>() => T;
}

export interface ProjectCommentLikePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProjectCommentLikePreviousValuesPromise
  extends Promise<ProjectCommentLikePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProjectCommentLikePreviousValuesSubscription
  extends Promise<AsyncIterator<ProjectCommentLikePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProjectImageSubscriptionPayload {
  mutation: MutationType;
  node: ProjectImage;
  updatedFields: String[];
  previousValues: ProjectImagePreviousValues;
}

export interface ProjectImageSubscriptionPayloadPromise
  extends Promise<ProjectImageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProjectImagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProjectImagePreviousValuesPromise>() => T;
}

export interface ProjectImageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProjectImageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProjectImageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProjectImagePreviousValuesSubscription>() => T;
}

export interface ProjectImagePreviousValues {
  id: ID_Output;
  imageUrl: String;
  deleteImageUrl: String;
}

export interface ProjectImagePreviousValuesPromise
  extends Promise<ProjectImagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  imageUrl: () => Promise<String>;
  deleteImageUrl: () => Promise<String>;
}

export interface ProjectImagePreviousValuesSubscription
  extends Promise<AsyncIterator<ProjectImagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  imageUrl: () => Promise<AsyncIterator<String>>;
  deleteImageUrl: () => Promise<AsyncIterator<String>>;
}

export interface ProjectLikeSubscriptionPayload {
  mutation: MutationType;
  node: ProjectLike;
  updatedFields: String[];
  previousValues: ProjectLikePreviousValues;
}

export interface ProjectLikeSubscriptionPayloadPromise
  extends Promise<ProjectLikeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProjectLikePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProjectLikePreviousValuesPromise>() => T;
}

export interface ProjectLikeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProjectLikeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProjectLikeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProjectLikePreviousValuesSubscription>() => T;
}

export interface ProjectLikePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProjectLikePreviousValuesPromise
  extends Promise<ProjectLikePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProjectLikePreviousValuesSubscription
  extends Promise<AsyncIterator<ProjectLikePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserAccountSubscriptionPayload {
  mutation: MutationType;
  node: UserAccount;
  updatedFields: String[];
  previousValues: UserAccountPreviousValues;
}

export interface UserAccountSubscriptionPayloadPromise
  extends Promise<UserAccountSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserAccountPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserAccountPreviousValuesPromise>() => T;
}

export interface UserAccountSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserAccountSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserAccountSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserAccountPreviousValuesSubscription>() => T;
}

export interface UserAccountPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserAccountPreviousValuesPromise
  extends Promise<UserAccountPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserAccountPreviousValuesSubscription
  extends Promise<AsyncIterator<UserAccountPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserProfileSubscriptionPayload {
  mutation: MutationType;
  node: UserProfile;
  updatedFields: String[];
  previousValues: UserProfilePreviousValues;
}

export interface UserProfileSubscriptionPayloadPromise
  extends Promise<UserProfileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserProfilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserProfilePreviousValuesPromise>() => T;
}

export interface UserProfileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserProfileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserProfileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserProfilePreviousValuesSubscription>() => T;
}

export interface UserProfilePreviousValues {
  id: ID_Output;
  userAccountId: ID_Output;
  email: String;
  firstName?: String;
  lastName?: String;
  profileImage?: String;
  country?: String;
  address?: String;
  state?: String;
  city?: String;
  zip?: Int;
  aptNumber?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserProfilePreviousValuesPromise
  extends Promise<UserProfilePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userAccountId: () => Promise<ID_Output>;
  email: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  profileImage: () => Promise<String>;
  country: () => Promise<String>;
  address: () => Promise<String>;
  state: () => Promise<String>;
  city: () => Promise<String>;
  zip: () => Promise<Int>;
  aptNumber: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserProfilePreviousValuesSubscription
  extends Promise<AsyncIterator<UserProfilePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userAccountId: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  profileImage: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<Int>>;
  aptNumber: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "UserAccount",
    embedded: false
  },
  {
    name: "ExternalAccount",
    embedded: false
  },
  {
    name: "UserProfile",
    embedded: false
  },
  {
    name: "Project",
    embedded: false
  },
  {
    name: "ProjectImage",
    embedded: false
  },
  {
    name: "ProjectLike",
    embedded: false
  },
  {
    name: "ProjectComment",
    embedded: false
  },
  {
    name: "ProjectCommentLike",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
