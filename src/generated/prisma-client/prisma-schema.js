module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateExternalAccount {
  count: Int!
}

type AggregateProject {
  count: Int!
}

type AggregateProjectComment {
  count: Int!
}

type AggregateProjectCommentLike {
  count: Int!
}

type AggregateProjectImage {
  count: Int!
}

type AggregateProjectLike {
  count: Int!
}

type AggregateUserAccount {
  count: Int!
}

type AggregateUserProfile {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type ExternalAccount {
  id: ID!
  accountId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ExternalAccountConnection {
  pageInfo: PageInfo!
  edges: [ExternalAccountEdge]!
  aggregate: AggregateExternalAccount!
}

input ExternalAccountCreateInput {
  id: ID
  accountId: ID!
}

type ExternalAccountEdge {
  node: ExternalAccount!
  cursor: String!
}

enum ExternalAccountOrderByInput {
  id_ASC
  id_DESC
  accountId_ASC
  accountId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ExternalAccountPreviousValues {
  id: ID!
  accountId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ExternalAccountSubscriptionPayload {
  mutation: MutationType!
  node: ExternalAccount
  updatedFields: [String!]
  previousValues: ExternalAccountPreviousValues
}

input ExternalAccountSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ExternalAccountWhereInput
  AND: [ExternalAccountSubscriptionWhereInput!]
  OR: [ExternalAccountSubscriptionWhereInput!]
  NOT: [ExternalAccountSubscriptionWhereInput!]
}

input ExternalAccountUpdateInput {
  accountId: ID
}

input ExternalAccountUpdateManyMutationInput {
  accountId: ID
}

input ExternalAccountWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  accountId: ID
  accountId_not: ID
  accountId_in: [ID!]
  accountId_not_in: [ID!]
  accountId_lt: ID
  accountId_lte: ID
  accountId_gt: ID
  accountId_gte: ID
  accountId_contains: ID
  accountId_not_contains: ID
  accountId_starts_with: ID
  accountId_not_starts_with: ID
  accountId_ends_with: ID
  accountId_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ExternalAccountWhereInput!]
  OR: [ExternalAccountWhereInput!]
  NOT: [ExternalAccountWhereInput!]
}

input ExternalAccountWhereUniqueInput {
  id: ID
  accountId: ID
}

scalar Long

type Mutation {
  createExternalAccount(data: ExternalAccountCreateInput!): ExternalAccount!
  updateExternalAccount(data: ExternalAccountUpdateInput!, where: ExternalAccountWhereUniqueInput!): ExternalAccount
  updateManyExternalAccounts(data: ExternalAccountUpdateManyMutationInput!, where: ExternalAccountWhereInput): BatchPayload!
  upsertExternalAccount(where: ExternalAccountWhereUniqueInput!, create: ExternalAccountCreateInput!, update: ExternalAccountUpdateInput!): ExternalAccount!
  deleteExternalAccount(where: ExternalAccountWhereUniqueInput!): ExternalAccount
  deleteManyExternalAccounts(where: ExternalAccountWhereInput): BatchPayload!
  createProject(data: ProjectCreateInput!): Project!
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateManyProjects(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  createProjectComment(data: ProjectCommentCreateInput!): ProjectComment!
  updateProjectComment(data: ProjectCommentUpdateInput!, where: ProjectCommentWhereUniqueInput!): ProjectComment
  updateManyProjectComments(data: ProjectCommentUpdateManyMutationInput!, where: ProjectCommentWhereInput): BatchPayload!
  upsertProjectComment(where: ProjectCommentWhereUniqueInput!, create: ProjectCommentCreateInput!, update: ProjectCommentUpdateInput!): ProjectComment!
  deleteProjectComment(where: ProjectCommentWhereUniqueInput!): ProjectComment
  deleteManyProjectComments(where: ProjectCommentWhereInput): BatchPayload!
  createProjectCommentLike(data: ProjectCommentLikeCreateInput!): ProjectCommentLike!
  updateProjectCommentLike(data: ProjectCommentLikeUpdateInput!, where: ProjectCommentLikeWhereUniqueInput!): ProjectCommentLike
  upsertProjectCommentLike(where: ProjectCommentLikeWhereUniqueInput!, create: ProjectCommentLikeCreateInput!, update: ProjectCommentLikeUpdateInput!): ProjectCommentLike!
  deleteProjectCommentLike(where: ProjectCommentLikeWhereUniqueInput!): ProjectCommentLike
  deleteManyProjectCommentLikes(where: ProjectCommentLikeWhereInput): BatchPayload!
  createProjectImage(data: ProjectImageCreateInput!): ProjectImage!
  updateProjectImage(data: ProjectImageUpdateInput!, where: ProjectImageWhereUniqueInput!): ProjectImage
  updateManyProjectImages(data: ProjectImageUpdateManyMutationInput!, where: ProjectImageWhereInput): BatchPayload!
  upsertProjectImage(where: ProjectImageWhereUniqueInput!, create: ProjectImageCreateInput!, update: ProjectImageUpdateInput!): ProjectImage!
  deleteProjectImage(where: ProjectImageWhereUniqueInput!): ProjectImage
  deleteManyProjectImages(where: ProjectImageWhereInput): BatchPayload!
  createProjectLike(data: ProjectLikeCreateInput!): ProjectLike!
  updateProjectLike(data: ProjectLikeUpdateInput!, where: ProjectLikeWhereUniqueInput!): ProjectLike
  upsertProjectLike(where: ProjectLikeWhereUniqueInput!, create: ProjectLikeCreateInput!, update: ProjectLikeUpdateInput!): ProjectLike!
  deleteProjectLike(where: ProjectLikeWhereUniqueInput!): ProjectLike
  deleteManyProjectLikes(where: ProjectLikeWhereInput): BatchPayload!
  createUserAccount(data: UserAccountCreateInput!): UserAccount!
  updateUserAccount(data: UserAccountUpdateInput!, where: UserAccountWhereUniqueInput!): UserAccount
  updateManyUserAccounts(data: UserAccountUpdateManyMutationInput!, where: UserAccountWhereInput): BatchPayload!
  upsertUserAccount(where: UserAccountWhereUniqueInput!, create: UserAccountCreateInput!, update: UserAccountUpdateInput!): UserAccount!
  deleteUserAccount(where: UserAccountWhereUniqueInput!): UserAccount
  deleteManyUserAccounts(where: UserAccountWhereInput): BatchPayload!
  createUserProfile(data: UserProfileCreateInput!): UserProfile!
  updateUserProfile(data: UserProfileUpdateInput!, where: UserProfileWhereUniqueInput!): UserProfile
  updateManyUserProfiles(data: UserProfileUpdateManyMutationInput!, where: UserProfileWhereInput): BatchPayload!
  upsertUserProfile(where: UserProfileWhereUniqueInput!, create: UserProfileCreateInput!, update: UserProfileUpdateInput!): UserProfile!
  deleteUserProfile(where: UserProfileWhereUniqueInput!): UserProfile
  deleteManyUserProfiles(where: UserProfileWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Project {
  id: ID!
  profile: UserProfile!
  featuredImage: String!
  images(where: ProjectImageWhereInput, orderBy: ProjectImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectImage!]
  name: String!
  description: String!
  country: String!
  address: String
  state: String
  city: String
  zip: String
  goalAmount: Float!
  amountFunded: Float!
  likes(where: ProjectLikeWhereInput, orderBy: ProjectLikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectLike!]
  comments(where: ProjectCommentWhereInput, orderBy: ProjectCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectComment!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProjectComment {
  id: ID!
  profile: UserProfile!
  project: Project!
  comment: String!
  likes(where: ProjectCommentLikeWhereInput, orderBy: ProjectCommentLikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectCommentLike!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProjectCommentConnection {
  pageInfo: PageInfo!
  edges: [ProjectCommentEdge]!
  aggregate: AggregateProjectComment!
}

input ProjectCommentCreateInput {
  id: ID
  profile: UserProfileCreateOneWithoutCommentsInput!
  project: ProjectCreateOneWithoutCommentsInput!
  comment: String!
  likes: ProjectCommentLikeCreateManyWithoutCommentInput
}

input ProjectCommentCreateManyWithoutProfileInput {
  create: [ProjectCommentCreateWithoutProfileInput!]
  connect: [ProjectCommentWhereUniqueInput!]
}

input ProjectCommentCreateManyWithoutProjectInput {
  create: [ProjectCommentCreateWithoutProjectInput!]
  connect: [ProjectCommentWhereUniqueInput!]
}

input ProjectCommentCreateOneWithoutLikesInput {
  create: ProjectCommentCreateWithoutLikesInput
  connect: ProjectCommentWhereUniqueInput
}

input ProjectCommentCreateWithoutLikesInput {
  id: ID
  profile: UserProfileCreateOneWithoutCommentsInput!
  project: ProjectCreateOneWithoutCommentsInput!
  comment: String!
}

input ProjectCommentCreateWithoutProfileInput {
  id: ID
  project: ProjectCreateOneWithoutCommentsInput!
  comment: String!
  likes: ProjectCommentLikeCreateManyWithoutCommentInput
}

input ProjectCommentCreateWithoutProjectInput {
  id: ID
  profile: UserProfileCreateOneWithoutCommentsInput!
  comment: String!
  likes: ProjectCommentLikeCreateManyWithoutCommentInput
}

type ProjectCommentEdge {
  node: ProjectComment!
  cursor: String!
}

type ProjectCommentLike {
  id: ID!
  profile: UserProfile!
  comment: ProjectComment!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProjectCommentLikeConnection {
  pageInfo: PageInfo!
  edges: [ProjectCommentLikeEdge]!
  aggregate: AggregateProjectCommentLike!
}

input ProjectCommentLikeCreateInput {
  id: ID
  profile: UserProfileCreateOneWithoutLikedCommentsInput!
  comment: ProjectCommentCreateOneWithoutLikesInput!
}

input ProjectCommentLikeCreateManyWithoutCommentInput {
  create: [ProjectCommentLikeCreateWithoutCommentInput!]
  connect: [ProjectCommentLikeWhereUniqueInput!]
}

input ProjectCommentLikeCreateManyWithoutProfileInput {
  create: [ProjectCommentLikeCreateWithoutProfileInput!]
  connect: [ProjectCommentLikeWhereUniqueInput!]
}

input ProjectCommentLikeCreateWithoutCommentInput {
  id: ID
  profile: UserProfileCreateOneWithoutLikedCommentsInput!
}

input ProjectCommentLikeCreateWithoutProfileInput {
  id: ID
  comment: ProjectCommentCreateOneWithoutLikesInput!
}

type ProjectCommentLikeEdge {
  node: ProjectCommentLike!
  cursor: String!
}

enum ProjectCommentLikeOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProjectCommentLikePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProjectCommentLikeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProjectCommentLikeScalarWhereInput!]
  OR: [ProjectCommentLikeScalarWhereInput!]
  NOT: [ProjectCommentLikeScalarWhereInput!]
}

type ProjectCommentLikeSubscriptionPayload {
  mutation: MutationType!
  node: ProjectCommentLike
  updatedFields: [String!]
  previousValues: ProjectCommentLikePreviousValues
}

input ProjectCommentLikeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectCommentLikeWhereInput
  AND: [ProjectCommentLikeSubscriptionWhereInput!]
  OR: [ProjectCommentLikeSubscriptionWhereInput!]
  NOT: [ProjectCommentLikeSubscriptionWhereInput!]
}

input ProjectCommentLikeUpdateInput {
  profile: UserProfileUpdateOneRequiredWithoutLikedCommentsInput
  comment: ProjectCommentUpdateOneRequiredWithoutLikesInput
}

input ProjectCommentLikeUpdateManyWithoutCommentInput {
  create: [ProjectCommentLikeCreateWithoutCommentInput!]
  delete: [ProjectCommentLikeWhereUniqueInput!]
  connect: [ProjectCommentLikeWhereUniqueInput!]
  set: [ProjectCommentLikeWhereUniqueInput!]
  disconnect: [ProjectCommentLikeWhereUniqueInput!]
  update: [ProjectCommentLikeUpdateWithWhereUniqueWithoutCommentInput!]
  upsert: [ProjectCommentLikeUpsertWithWhereUniqueWithoutCommentInput!]
  deleteMany: [ProjectCommentLikeScalarWhereInput!]
}

input ProjectCommentLikeUpdateManyWithoutProfileInput {
  create: [ProjectCommentLikeCreateWithoutProfileInput!]
  delete: [ProjectCommentLikeWhereUniqueInput!]
  connect: [ProjectCommentLikeWhereUniqueInput!]
  set: [ProjectCommentLikeWhereUniqueInput!]
  disconnect: [ProjectCommentLikeWhereUniqueInput!]
  update: [ProjectCommentLikeUpdateWithWhereUniqueWithoutProfileInput!]
  upsert: [ProjectCommentLikeUpsertWithWhereUniqueWithoutProfileInput!]
  deleteMany: [ProjectCommentLikeScalarWhereInput!]
}

input ProjectCommentLikeUpdateWithoutCommentDataInput {
  profile: UserProfileUpdateOneRequiredWithoutLikedCommentsInput
}

input ProjectCommentLikeUpdateWithoutProfileDataInput {
  comment: ProjectCommentUpdateOneRequiredWithoutLikesInput
}

input ProjectCommentLikeUpdateWithWhereUniqueWithoutCommentInput {
  where: ProjectCommentLikeWhereUniqueInput!
  data: ProjectCommentLikeUpdateWithoutCommentDataInput!
}

input ProjectCommentLikeUpdateWithWhereUniqueWithoutProfileInput {
  where: ProjectCommentLikeWhereUniqueInput!
  data: ProjectCommentLikeUpdateWithoutProfileDataInput!
}

input ProjectCommentLikeUpsertWithWhereUniqueWithoutCommentInput {
  where: ProjectCommentLikeWhereUniqueInput!
  update: ProjectCommentLikeUpdateWithoutCommentDataInput!
  create: ProjectCommentLikeCreateWithoutCommentInput!
}

input ProjectCommentLikeUpsertWithWhereUniqueWithoutProfileInput {
  where: ProjectCommentLikeWhereUniqueInput!
  update: ProjectCommentLikeUpdateWithoutProfileDataInput!
  create: ProjectCommentLikeCreateWithoutProfileInput!
}

input ProjectCommentLikeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  profile: UserProfileWhereInput
  comment: ProjectCommentWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProjectCommentLikeWhereInput!]
  OR: [ProjectCommentLikeWhereInput!]
  NOT: [ProjectCommentLikeWhereInput!]
}

input ProjectCommentLikeWhereUniqueInput {
  id: ID
}

enum ProjectCommentOrderByInput {
  id_ASC
  id_DESC
  comment_ASC
  comment_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProjectCommentPreviousValues {
  id: ID!
  comment: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProjectCommentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  comment: String
  comment_not: String
  comment_in: [String!]
  comment_not_in: [String!]
  comment_lt: String
  comment_lte: String
  comment_gt: String
  comment_gte: String
  comment_contains: String
  comment_not_contains: String
  comment_starts_with: String
  comment_not_starts_with: String
  comment_ends_with: String
  comment_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProjectCommentScalarWhereInput!]
  OR: [ProjectCommentScalarWhereInput!]
  NOT: [ProjectCommentScalarWhereInput!]
}

type ProjectCommentSubscriptionPayload {
  mutation: MutationType!
  node: ProjectComment
  updatedFields: [String!]
  previousValues: ProjectCommentPreviousValues
}

input ProjectCommentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectCommentWhereInput
  AND: [ProjectCommentSubscriptionWhereInput!]
  OR: [ProjectCommentSubscriptionWhereInput!]
  NOT: [ProjectCommentSubscriptionWhereInput!]
}

input ProjectCommentUpdateInput {
  profile: UserProfileUpdateOneRequiredWithoutCommentsInput
  project: ProjectUpdateOneRequiredWithoutCommentsInput
  comment: String
  likes: ProjectCommentLikeUpdateManyWithoutCommentInput
}

input ProjectCommentUpdateManyDataInput {
  comment: String
}

input ProjectCommentUpdateManyMutationInput {
  comment: String
}

input ProjectCommentUpdateManyWithoutProfileInput {
  create: [ProjectCommentCreateWithoutProfileInput!]
  delete: [ProjectCommentWhereUniqueInput!]
  connect: [ProjectCommentWhereUniqueInput!]
  set: [ProjectCommentWhereUniqueInput!]
  disconnect: [ProjectCommentWhereUniqueInput!]
  update: [ProjectCommentUpdateWithWhereUniqueWithoutProfileInput!]
  upsert: [ProjectCommentUpsertWithWhereUniqueWithoutProfileInput!]
  deleteMany: [ProjectCommentScalarWhereInput!]
  updateMany: [ProjectCommentUpdateManyWithWhereNestedInput!]
}

input ProjectCommentUpdateManyWithoutProjectInput {
  create: [ProjectCommentCreateWithoutProjectInput!]
  delete: [ProjectCommentWhereUniqueInput!]
  connect: [ProjectCommentWhereUniqueInput!]
  set: [ProjectCommentWhereUniqueInput!]
  disconnect: [ProjectCommentWhereUniqueInput!]
  update: [ProjectCommentUpdateWithWhereUniqueWithoutProjectInput!]
  upsert: [ProjectCommentUpsertWithWhereUniqueWithoutProjectInput!]
  deleteMany: [ProjectCommentScalarWhereInput!]
  updateMany: [ProjectCommentUpdateManyWithWhereNestedInput!]
}

input ProjectCommentUpdateManyWithWhereNestedInput {
  where: ProjectCommentScalarWhereInput!
  data: ProjectCommentUpdateManyDataInput!
}

input ProjectCommentUpdateOneRequiredWithoutLikesInput {
  create: ProjectCommentCreateWithoutLikesInput
  update: ProjectCommentUpdateWithoutLikesDataInput
  upsert: ProjectCommentUpsertWithoutLikesInput
  connect: ProjectCommentWhereUniqueInput
}

input ProjectCommentUpdateWithoutLikesDataInput {
  profile: UserProfileUpdateOneRequiredWithoutCommentsInput
  project: ProjectUpdateOneRequiredWithoutCommentsInput
  comment: String
}

input ProjectCommentUpdateWithoutProfileDataInput {
  project: ProjectUpdateOneRequiredWithoutCommentsInput
  comment: String
  likes: ProjectCommentLikeUpdateManyWithoutCommentInput
}

input ProjectCommentUpdateWithoutProjectDataInput {
  profile: UserProfileUpdateOneRequiredWithoutCommentsInput
  comment: String
  likes: ProjectCommentLikeUpdateManyWithoutCommentInput
}

input ProjectCommentUpdateWithWhereUniqueWithoutProfileInput {
  where: ProjectCommentWhereUniqueInput!
  data: ProjectCommentUpdateWithoutProfileDataInput!
}

input ProjectCommentUpdateWithWhereUniqueWithoutProjectInput {
  where: ProjectCommentWhereUniqueInput!
  data: ProjectCommentUpdateWithoutProjectDataInput!
}

input ProjectCommentUpsertWithoutLikesInput {
  update: ProjectCommentUpdateWithoutLikesDataInput!
  create: ProjectCommentCreateWithoutLikesInput!
}

input ProjectCommentUpsertWithWhereUniqueWithoutProfileInput {
  where: ProjectCommentWhereUniqueInput!
  update: ProjectCommentUpdateWithoutProfileDataInput!
  create: ProjectCommentCreateWithoutProfileInput!
}

input ProjectCommentUpsertWithWhereUniqueWithoutProjectInput {
  where: ProjectCommentWhereUniqueInput!
  update: ProjectCommentUpdateWithoutProjectDataInput!
  create: ProjectCommentCreateWithoutProjectInput!
}

input ProjectCommentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  profile: UserProfileWhereInput
  project: ProjectWhereInput
  comment: String
  comment_not: String
  comment_in: [String!]
  comment_not_in: [String!]
  comment_lt: String
  comment_lte: String
  comment_gt: String
  comment_gte: String
  comment_contains: String
  comment_not_contains: String
  comment_starts_with: String
  comment_not_starts_with: String
  comment_ends_with: String
  comment_not_ends_with: String
  likes_every: ProjectCommentLikeWhereInput
  likes_some: ProjectCommentLikeWhereInput
  likes_none: ProjectCommentLikeWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProjectCommentWhereInput!]
  OR: [ProjectCommentWhereInput!]
  NOT: [ProjectCommentWhereInput!]
}

input ProjectCommentWhereUniqueInput {
  id: ID
}

type ProjectConnection {
  pageInfo: PageInfo!
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  id: ID
  profile: UserProfileCreateOneWithoutProjectsInput!
  featuredImage: String!
  images: ProjectImageCreateManyWithoutProjectInput
  name: String!
  description: String!
  country: String!
  address: String
  state: String
  city: String
  zip: String
  goalAmount: Float!
  amountFunded: Float
  likes: ProjectLikeCreateManyWithoutProjectInput
  comments: ProjectCommentCreateManyWithoutProjectInput
}

input ProjectCreateManyWithoutProfileInput {
  create: [ProjectCreateWithoutProfileInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateOneWithoutCommentsInput {
  create: ProjectCreateWithoutCommentsInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateOneWithoutImagesInput {
  create: ProjectCreateWithoutImagesInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateOneWithoutLikesInput {
  create: ProjectCreateWithoutLikesInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateWithoutCommentsInput {
  id: ID
  profile: UserProfileCreateOneWithoutProjectsInput!
  featuredImage: String!
  images: ProjectImageCreateManyWithoutProjectInput
  name: String!
  description: String!
  country: String!
  address: String
  state: String
  city: String
  zip: String
  goalAmount: Float!
  amountFunded: Float
  likes: ProjectLikeCreateManyWithoutProjectInput
}

input ProjectCreateWithoutImagesInput {
  id: ID
  profile: UserProfileCreateOneWithoutProjectsInput!
  featuredImage: String!
  name: String!
  description: String!
  country: String!
  address: String
  state: String
  city: String
  zip: String
  goalAmount: Float!
  amountFunded: Float
  likes: ProjectLikeCreateManyWithoutProjectInput
  comments: ProjectCommentCreateManyWithoutProjectInput
}

input ProjectCreateWithoutLikesInput {
  id: ID
  profile: UserProfileCreateOneWithoutProjectsInput!
  featuredImage: String!
  images: ProjectImageCreateManyWithoutProjectInput
  name: String!
  description: String!
  country: String!
  address: String
  state: String
  city: String
  zip: String
  goalAmount: Float!
  amountFunded: Float
  comments: ProjectCommentCreateManyWithoutProjectInput
}

input ProjectCreateWithoutProfileInput {
  id: ID
  featuredImage: String!
  images: ProjectImageCreateManyWithoutProjectInput
  name: String!
  description: String!
  country: String!
  address: String
  state: String
  city: String
  zip: String
  goalAmount: Float!
  amountFunded: Float
  likes: ProjectLikeCreateManyWithoutProjectInput
  comments: ProjectCommentCreateManyWithoutProjectInput
}

type ProjectEdge {
  node: Project!
  cursor: String!
}

type ProjectImage {
  id: ID!
  project: Project!
  imageUrl: String!
  deleteImageUrl: String!
}

type ProjectImageConnection {
  pageInfo: PageInfo!
  edges: [ProjectImageEdge]!
  aggregate: AggregateProjectImage!
}

input ProjectImageCreateInput {
  id: ID
  project: ProjectCreateOneWithoutImagesInput!
  imageUrl: String!
  deleteImageUrl: String!
}

input ProjectImageCreateManyWithoutProjectInput {
  create: [ProjectImageCreateWithoutProjectInput!]
  connect: [ProjectImageWhereUniqueInput!]
}

input ProjectImageCreateWithoutProjectInput {
  id: ID
  imageUrl: String!
  deleteImageUrl: String!
}

type ProjectImageEdge {
  node: ProjectImage!
  cursor: String!
}

enum ProjectImageOrderByInput {
  id_ASC
  id_DESC
  imageUrl_ASC
  imageUrl_DESC
  deleteImageUrl_ASC
  deleteImageUrl_DESC
}

type ProjectImagePreviousValues {
  id: ID!
  imageUrl: String!
  deleteImageUrl: String!
}

input ProjectImageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  imageUrl: String
  imageUrl_not: String
  imageUrl_in: [String!]
  imageUrl_not_in: [String!]
  imageUrl_lt: String
  imageUrl_lte: String
  imageUrl_gt: String
  imageUrl_gte: String
  imageUrl_contains: String
  imageUrl_not_contains: String
  imageUrl_starts_with: String
  imageUrl_not_starts_with: String
  imageUrl_ends_with: String
  imageUrl_not_ends_with: String
  deleteImageUrl: String
  deleteImageUrl_not: String
  deleteImageUrl_in: [String!]
  deleteImageUrl_not_in: [String!]
  deleteImageUrl_lt: String
  deleteImageUrl_lte: String
  deleteImageUrl_gt: String
  deleteImageUrl_gte: String
  deleteImageUrl_contains: String
  deleteImageUrl_not_contains: String
  deleteImageUrl_starts_with: String
  deleteImageUrl_not_starts_with: String
  deleteImageUrl_ends_with: String
  deleteImageUrl_not_ends_with: String
  AND: [ProjectImageScalarWhereInput!]
  OR: [ProjectImageScalarWhereInput!]
  NOT: [ProjectImageScalarWhereInput!]
}

type ProjectImageSubscriptionPayload {
  mutation: MutationType!
  node: ProjectImage
  updatedFields: [String!]
  previousValues: ProjectImagePreviousValues
}

input ProjectImageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectImageWhereInput
  AND: [ProjectImageSubscriptionWhereInput!]
  OR: [ProjectImageSubscriptionWhereInput!]
  NOT: [ProjectImageSubscriptionWhereInput!]
}

input ProjectImageUpdateInput {
  project: ProjectUpdateOneRequiredWithoutImagesInput
  imageUrl: String
  deleteImageUrl: String
}

input ProjectImageUpdateManyDataInput {
  imageUrl: String
  deleteImageUrl: String
}

input ProjectImageUpdateManyMutationInput {
  imageUrl: String
  deleteImageUrl: String
}

input ProjectImageUpdateManyWithoutProjectInput {
  create: [ProjectImageCreateWithoutProjectInput!]
  delete: [ProjectImageWhereUniqueInput!]
  connect: [ProjectImageWhereUniqueInput!]
  set: [ProjectImageWhereUniqueInput!]
  disconnect: [ProjectImageWhereUniqueInput!]
  update: [ProjectImageUpdateWithWhereUniqueWithoutProjectInput!]
  upsert: [ProjectImageUpsertWithWhereUniqueWithoutProjectInput!]
  deleteMany: [ProjectImageScalarWhereInput!]
  updateMany: [ProjectImageUpdateManyWithWhereNestedInput!]
}

input ProjectImageUpdateManyWithWhereNestedInput {
  where: ProjectImageScalarWhereInput!
  data: ProjectImageUpdateManyDataInput!
}

input ProjectImageUpdateWithoutProjectDataInput {
  imageUrl: String
  deleteImageUrl: String
}

input ProjectImageUpdateWithWhereUniqueWithoutProjectInput {
  where: ProjectImageWhereUniqueInput!
  data: ProjectImageUpdateWithoutProjectDataInput!
}

input ProjectImageUpsertWithWhereUniqueWithoutProjectInput {
  where: ProjectImageWhereUniqueInput!
  update: ProjectImageUpdateWithoutProjectDataInput!
  create: ProjectImageCreateWithoutProjectInput!
}

input ProjectImageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  project: ProjectWhereInput
  imageUrl: String
  imageUrl_not: String
  imageUrl_in: [String!]
  imageUrl_not_in: [String!]
  imageUrl_lt: String
  imageUrl_lte: String
  imageUrl_gt: String
  imageUrl_gte: String
  imageUrl_contains: String
  imageUrl_not_contains: String
  imageUrl_starts_with: String
  imageUrl_not_starts_with: String
  imageUrl_ends_with: String
  imageUrl_not_ends_with: String
  deleteImageUrl: String
  deleteImageUrl_not: String
  deleteImageUrl_in: [String!]
  deleteImageUrl_not_in: [String!]
  deleteImageUrl_lt: String
  deleteImageUrl_lte: String
  deleteImageUrl_gt: String
  deleteImageUrl_gte: String
  deleteImageUrl_contains: String
  deleteImageUrl_not_contains: String
  deleteImageUrl_starts_with: String
  deleteImageUrl_not_starts_with: String
  deleteImageUrl_ends_with: String
  deleteImageUrl_not_ends_with: String
  AND: [ProjectImageWhereInput!]
  OR: [ProjectImageWhereInput!]
  NOT: [ProjectImageWhereInput!]
}

input ProjectImageWhereUniqueInput {
  id: ID
}

type ProjectLike {
  id: ID!
  profile: UserProfile!
  project: Project!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProjectLikeConnection {
  pageInfo: PageInfo!
  edges: [ProjectLikeEdge]!
  aggregate: AggregateProjectLike!
}

input ProjectLikeCreateInput {
  id: ID
  profile: UserProfileCreateOneWithoutLikedProjectsInput!
  project: ProjectCreateOneWithoutLikesInput!
}

input ProjectLikeCreateManyWithoutProfileInput {
  create: [ProjectLikeCreateWithoutProfileInput!]
  connect: [ProjectLikeWhereUniqueInput!]
}

input ProjectLikeCreateManyWithoutProjectInput {
  create: [ProjectLikeCreateWithoutProjectInput!]
  connect: [ProjectLikeWhereUniqueInput!]
}

input ProjectLikeCreateWithoutProfileInput {
  id: ID
  project: ProjectCreateOneWithoutLikesInput!
}

input ProjectLikeCreateWithoutProjectInput {
  id: ID
  profile: UserProfileCreateOneWithoutLikedProjectsInput!
}

type ProjectLikeEdge {
  node: ProjectLike!
  cursor: String!
}

enum ProjectLikeOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProjectLikePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProjectLikeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProjectLikeScalarWhereInput!]
  OR: [ProjectLikeScalarWhereInput!]
  NOT: [ProjectLikeScalarWhereInput!]
}

type ProjectLikeSubscriptionPayload {
  mutation: MutationType!
  node: ProjectLike
  updatedFields: [String!]
  previousValues: ProjectLikePreviousValues
}

input ProjectLikeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectLikeWhereInput
  AND: [ProjectLikeSubscriptionWhereInput!]
  OR: [ProjectLikeSubscriptionWhereInput!]
  NOT: [ProjectLikeSubscriptionWhereInput!]
}

input ProjectLikeUpdateInput {
  profile: UserProfileUpdateOneRequiredWithoutLikedProjectsInput
  project: ProjectUpdateOneRequiredWithoutLikesInput
}

input ProjectLikeUpdateManyWithoutProfileInput {
  create: [ProjectLikeCreateWithoutProfileInput!]
  delete: [ProjectLikeWhereUniqueInput!]
  connect: [ProjectLikeWhereUniqueInput!]
  set: [ProjectLikeWhereUniqueInput!]
  disconnect: [ProjectLikeWhereUniqueInput!]
  update: [ProjectLikeUpdateWithWhereUniqueWithoutProfileInput!]
  upsert: [ProjectLikeUpsertWithWhereUniqueWithoutProfileInput!]
  deleteMany: [ProjectLikeScalarWhereInput!]
}

input ProjectLikeUpdateManyWithoutProjectInput {
  create: [ProjectLikeCreateWithoutProjectInput!]
  delete: [ProjectLikeWhereUniqueInput!]
  connect: [ProjectLikeWhereUniqueInput!]
  set: [ProjectLikeWhereUniqueInput!]
  disconnect: [ProjectLikeWhereUniqueInput!]
  update: [ProjectLikeUpdateWithWhereUniqueWithoutProjectInput!]
  upsert: [ProjectLikeUpsertWithWhereUniqueWithoutProjectInput!]
  deleteMany: [ProjectLikeScalarWhereInput!]
}

input ProjectLikeUpdateWithoutProfileDataInput {
  project: ProjectUpdateOneRequiredWithoutLikesInput
}

input ProjectLikeUpdateWithoutProjectDataInput {
  profile: UserProfileUpdateOneRequiredWithoutLikedProjectsInput
}

input ProjectLikeUpdateWithWhereUniqueWithoutProfileInput {
  where: ProjectLikeWhereUniqueInput!
  data: ProjectLikeUpdateWithoutProfileDataInput!
}

input ProjectLikeUpdateWithWhereUniqueWithoutProjectInput {
  where: ProjectLikeWhereUniqueInput!
  data: ProjectLikeUpdateWithoutProjectDataInput!
}

input ProjectLikeUpsertWithWhereUniqueWithoutProfileInput {
  where: ProjectLikeWhereUniqueInput!
  update: ProjectLikeUpdateWithoutProfileDataInput!
  create: ProjectLikeCreateWithoutProfileInput!
}

input ProjectLikeUpsertWithWhereUniqueWithoutProjectInput {
  where: ProjectLikeWhereUniqueInput!
  update: ProjectLikeUpdateWithoutProjectDataInput!
  create: ProjectLikeCreateWithoutProjectInput!
}

input ProjectLikeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  profile: UserProfileWhereInput
  project: ProjectWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProjectLikeWhereInput!]
  OR: [ProjectLikeWhereInput!]
  NOT: [ProjectLikeWhereInput!]
}

input ProjectLikeWhereUniqueInput {
  id: ID
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  featuredImage_ASC
  featuredImage_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  country_ASC
  country_DESC
  address_ASC
  address_DESC
  state_ASC
  state_DESC
  city_ASC
  city_DESC
  zip_ASC
  zip_DESC
  goalAmount_ASC
  goalAmount_DESC
  amountFunded_ASC
  amountFunded_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProjectPreviousValues {
  id: ID!
  featuredImage: String!
  name: String!
  description: String!
  country: String!
  address: String
  state: String
  city: String
  zip: String
  goalAmount: Float!
  amountFunded: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProjectScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  featuredImage: String
  featuredImage_not: String
  featuredImage_in: [String!]
  featuredImage_not_in: [String!]
  featuredImage_lt: String
  featuredImage_lte: String
  featuredImage_gt: String
  featuredImage_gte: String
  featuredImage_contains: String
  featuredImage_not_contains: String
  featuredImage_starts_with: String
  featuredImage_not_starts_with: String
  featuredImage_ends_with: String
  featuredImage_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  country: String
  country_not: String
  country_in: [String!]
  country_not_in: [String!]
  country_lt: String
  country_lte: String
  country_gt: String
  country_gte: String
  country_contains: String
  country_not_contains: String
  country_starts_with: String
  country_not_starts_with: String
  country_ends_with: String
  country_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  zip: String
  zip_not: String
  zip_in: [String!]
  zip_not_in: [String!]
  zip_lt: String
  zip_lte: String
  zip_gt: String
  zip_gte: String
  zip_contains: String
  zip_not_contains: String
  zip_starts_with: String
  zip_not_starts_with: String
  zip_ends_with: String
  zip_not_ends_with: String
  goalAmount: Float
  goalAmount_not: Float
  goalAmount_in: [Float!]
  goalAmount_not_in: [Float!]
  goalAmount_lt: Float
  goalAmount_lte: Float
  goalAmount_gt: Float
  goalAmount_gte: Float
  amountFunded: Float
  amountFunded_not: Float
  amountFunded_in: [Float!]
  amountFunded_not_in: [Float!]
  amountFunded_lt: Float
  amountFunded_lte: Float
  amountFunded_gt: Float
  amountFunded_gte: Float
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProjectScalarWhereInput!]
  OR: [ProjectScalarWhereInput!]
  NOT: [ProjectScalarWhereInput!]
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
  AND: [ProjectSubscriptionWhereInput!]
  OR: [ProjectSubscriptionWhereInput!]
  NOT: [ProjectSubscriptionWhereInput!]
}

input ProjectUpdateInput {
  profile: UserProfileUpdateOneRequiredWithoutProjectsInput
  featuredImage: String
  images: ProjectImageUpdateManyWithoutProjectInput
  name: String
  description: String
  country: String
  address: String
  state: String
  city: String
  zip: String
  goalAmount: Float
  amountFunded: Float
  likes: ProjectLikeUpdateManyWithoutProjectInput
  comments: ProjectCommentUpdateManyWithoutProjectInput
}

input ProjectUpdateManyDataInput {
  featuredImage: String
  name: String
  description: String
  country: String
  address: String
  state: String
  city: String
  zip: String
  goalAmount: Float
  amountFunded: Float
}

input ProjectUpdateManyMutationInput {
  featuredImage: String
  name: String
  description: String
  country: String
  address: String
  state: String
  city: String
  zip: String
  goalAmount: Float
  amountFunded: Float
}

input ProjectUpdateManyWithoutProfileInput {
  create: [ProjectCreateWithoutProfileInput!]
  delete: [ProjectWhereUniqueInput!]
  connect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutProfileInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutProfileInput!]
  deleteMany: [ProjectScalarWhereInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
}

input ProjectUpdateManyWithWhereNestedInput {
  where: ProjectScalarWhereInput!
  data: ProjectUpdateManyDataInput!
}

input ProjectUpdateOneRequiredWithoutCommentsInput {
  create: ProjectCreateWithoutCommentsInput
  update: ProjectUpdateWithoutCommentsDataInput
  upsert: ProjectUpsertWithoutCommentsInput
  connect: ProjectWhereUniqueInput
}

input ProjectUpdateOneRequiredWithoutImagesInput {
  create: ProjectCreateWithoutImagesInput
  update: ProjectUpdateWithoutImagesDataInput
  upsert: ProjectUpsertWithoutImagesInput
  connect: ProjectWhereUniqueInput
}

input ProjectUpdateOneRequiredWithoutLikesInput {
  create: ProjectCreateWithoutLikesInput
  update: ProjectUpdateWithoutLikesDataInput
  upsert: ProjectUpsertWithoutLikesInput
  connect: ProjectWhereUniqueInput
}

input ProjectUpdateWithoutCommentsDataInput {
  profile: UserProfileUpdateOneRequiredWithoutProjectsInput
  featuredImage: String
  images: ProjectImageUpdateManyWithoutProjectInput
  name: String
  description: String
  country: String
  address: String
  state: String
  city: String
  zip: String
  goalAmount: Float
  amountFunded: Float
  likes: ProjectLikeUpdateManyWithoutProjectInput
}

input ProjectUpdateWithoutImagesDataInput {
  profile: UserProfileUpdateOneRequiredWithoutProjectsInput
  featuredImage: String
  name: String
  description: String
  country: String
  address: String
  state: String
  city: String
  zip: String
  goalAmount: Float
  amountFunded: Float
  likes: ProjectLikeUpdateManyWithoutProjectInput
  comments: ProjectCommentUpdateManyWithoutProjectInput
}

input ProjectUpdateWithoutLikesDataInput {
  profile: UserProfileUpdateOneRequiredWithoutProjectsInput
  featuredImage: String
  images: ProjectImageUpdateManyWithoutProjectInput
  name: String
  description: String
  country: String
  address: String
  state: String
  city: String
  zip: String
  goalAmount: Float
  amountFunded: Float
  comments: ProjectCommentUpdateManyWithoutProjectInput
}

input ProjectUpdateWithoutProfileDataInput {
  featuredImage: String
  images: ProjectImageUpdateManyWithoutProjectInput
  name: String
  description: String
  country: String
  address: String
  state: String
  city: String
  zip: String
  goalAmount: Float
  amountFunded: Float
  likes: ProjectLikeUpdateManyWithoutProjectInput
  comments: ProjectCommentUpdateManyWithoutProjectInput
}

input ProjectUpdateWithWhereUniqueWithoutProfileInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutProfileDataInput!
}

input ProjectUpsertWithoutCommentsInput {
  update: ProjectUpdateWithoutCommentsDataInput!
  create: ProjectCreateWithoutCommentsInput!
}

input ProjectUpsertWithoutImagesInput {
  update: ProjectUpdateWithoutImagesDataInput!
  create: ProjectCreateWithoutImagesInput!
}

input ProjectUpsertWithoutLikesInput {
  update: ProjectUpdateWithoutLikesDataInput!
  create: ProjectCreateWithoutLikesInput!
}

input ProjectUpsertWithWhereUniqueWithoutProfileInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutProfileDataInput!
  create: ProjectCreateWithoutProfileInput!
}

input ProjectWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  profile: UserProfileWhereInput
  featuredImage: String
  featuredImage_not: String
  featuredImage_in: [String!]
  featuredImage_not_in: [String!]
  featuredImage_lt: String
  featuredImage_lte: String
  featuredImage_gt: String
  featuredImage_gte: String
  featuredImage_contains: String
  featuredImage_not_contains: String
  featuredImage_starts_with: String
  featuredImage_not_starts_with: String
  featuredImage_ends_with: String
  featuredImage_not_ends_with: String
  images_every: ProjectImageWhereInput
  images_some: ProjectImageWhereInput
  images_none: ProjectImageWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  country: String
  country_not: String
  country_in: [String!]
  country_not_in: [String!]
  country_lt: String
  country_lte: String
  country_gt: String
  country_gte: String
  country_contains: String
  country_not_contains: String
  country_starts_with: String
  country_not_starts_with: String
  country_ends_with: String
  country_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  zip: String
  zip_not: String
  zip_in: [String!]
  zip_not_in: [String!]
  zip_lt: String
  zip_lte: String
  zip_gt: String
  zip_gte: String
  zip_contains: String
  zip_not_contains: String
  zip_starts_with: String
  zip_not_starts_with: String
  zip_ends_with: String
  zip_not_ends_with: String
  goalAmount: Float
  goalAmount_not: Float
  goalAmount_in: [Float!]
  goalAmount_not_in: [Float!]
  goalAmount_lt: Float
  goalAmount_lte: Float
  goalAmount_gt: Float
  goalAmount_gte: Float
  amountFunded: Float
  amountFunded_not: Float
  amountFunded_in: [Float!]
  amountFunded_not_in: [Float!]
  amountFunded_lt: Float
  amountFunded_lte: Float
  amountFunded_gt: Float
  amountFunded_gte: Float
  likes_every: ProjectLikeWhereInput
  likes_some: ProjectLikeWhereInput
  likes_none: ProjectLikeWhereInput
  comments_every: ProjectCommentWhereInput
  comments_some: ProjectCommentWhereInput
  comments_none: ProjectCommentWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
}

input ProjectWhereUniqueInput {
  id: ID
}

type Query {
  externalAccount(where: ExternalAccountWhereUniqueInput!): ExternalAccount
  externalAccounts(where: ExternalAccountWhereInput, orderBy: ExternalAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ExternalAccount]!
  externalAccountsConnection(where: ExternalAccountWhereInput, orderBy: ExternalAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExternalAccountConnection!
  project(where: ProjectWhereUniqueInput!): Project
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  projectComment(where: ProjectCommentWhereUniqueInput!): ProjectComment
  projectComments(where: ProjectCommentWhereInput, orderBy: ProjectCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectComment]!
  projectCommentsConnection(where: ProjectCommentWhereInput, orderBy: ProjectCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectCommentConnection!
  projectCommentLike(where: ProjectCommentLikeWhereUniqueInput!): ProjectCommentLike
  projectCommentLikes(where: ProjectCommentLikeWhereInput, orderBy: ProjectCommentLikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectCommentLike]!
  projectCommentLikesConnection(where: ProjectCommentLikeWhereInput, orderBy: ProjectCommentLikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectCommentLikeConnection!
  projectImage(where: ProjectImageWhereUniqueInput!): ProjectImage
  projectImages(where: ProjectImageWhereInput, orderBy: ProjectImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectImage]!
  projectImagesConnection(where: ProjectImageWhereInput, orderBy: ProjectImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectImageConnection!
  projectLike(where: ProjectLikeWhereUniqueInput!): ProjectLike
  projectLikes(where: ProjectLikeWhereInput, orderBy: ProjectLikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectLike]!
  projectLikesConnection(where: ProjectLikeWhereInput, orderBy: ProjectLikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectLikeConnection!
  userAccount(where: UserAccountWhereUniqueInput!): UserAccount
  userAccounts(where: UserAccountWhereInput, orderBy: UserAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserAccount]!
  userAccountsConnection(where: UserAccountWhereInput, orderBy: UserAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserAccountConnection!
  userProfile(where: UserProfileWhereUniqueInput!): UserProfile
  userProfiles(where: UserProfileWhereInput, orderBy: UserProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserProfile]!
  userProfilesConnection(where: UserProfileWhereInput, orderBy: UserProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserProfileConnection!
  node(id: ID!): Node
}

type Subscription {
  externalAccount(where: ExternalAccountSubscriptionWhereInput): ExternalAccountSubscriptionPayload
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  projectComment(where: ProjectCommentSubscriptionWhereInput): ProjectCommentSubscriptionPayload
  projectCommentLike(where: ProjectCommentLikeSubscriptionWhereInput): ProjectCommentLikeSubscriptionPayload
  projectImage(where: ProjectImageSubscriptionWhereInput): ProjectImageSubscriptionPayload
  projectLike(where: ProjectLikeSubscriptionWhereInput): ProjectLikeSubscriptionPayload
  userAccount(where: UserAccountSubscriptionWhereInput): UserAccountSubscriptionPayload
  userProfile(where: UserProfileSubscriptionWhereInput): UserProfileSubscriptionPayload
}

type UserAccount {
  id: ID!
  email: String!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserAccountConnection {
  pageInfo: PageInfo!
  edges: [UserAccountEdge]!
  aggregate: AggregateUserAccount!
}

input UserAccountCreateInput {
  id: ID
  email: String!
  password: String!
}

type UserAccountEdge {
  node: UserAccount!
  cursor: String!
}

enum UserAccountOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserAccountPreviousValues {
  id: ID!
  email: String!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserAccountSubscriptionPayload {
  mutation: MutationType!
  node: UserAccount
  updatedFields: [String!]
  previousValues: UserAccountPreviousValues
}

input UserAccountSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserAccountWhereInput
  AND: [UserAccountSubscriptionWhereInput!]
  OR: [UserAccountSubscriptionWhereInput!]
  NOT: [UserAccountSubscriptionWhereInput!]
}

input UserAccountUpdateInput {
  email: String
  password: String
}

input UserAccountUpdateManyMutationInput {
  email: String
  password: String
}

input UserAccountWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserAccountWhereInput!]
  OR: [UserAccountWhereInput!]
  NOT: [UserAccountWhereInput!]
}

input UserAccountWhereUniqueInput {
  id: ID
  email: String
}

type UserProfile {
  id: ID!
  userAccountId: ID!
  email: String!
  firstName: String
  lastName: String
  profileImage: String
  country: String!
  address: String
  state: String
  city: String
  zip: String
  aptNumber: String
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
  likedProjects(where: ProjectLikeWhereInput, orderBy: ProjectLikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectLike!]
  comments(where: ProjectCommentWhereInput, orderBy: ProjectCommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectComment!]
  likedComments(where: ProjectCommentLikeWhereInput, orderBy: ProjectCommentLikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectCommentLike!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserProfileConnection {
  pageInfo: PageInfo!
  edges: [UserProfileEdge]!
  aggregate: AggregateUserProfile!
}

input UserProfileCreateInput {
  id: ID
  userAccountId: ID!
  email: String!
  firstName: String
  lastName: String
  profileImage: String
  country: String!
  address: String
  state: String
  city: String
  zip: String
  aptNumber: String
  projects: ProjectCreateManyWithoutProfileInput
  likedProjects: ProjectLikeCreateManyWithoutProfileInput
  comments: ProjectCommentCreateManyWithoutProfileInput
  likedComments: ProjectCommentLikeCreateManyWithoutProfileInput
}

input UserProfileCreateOneWithoutCommentsInput {
  create: UserProfileCreateWithoutCommentsInput
  connect: UserProfileWhereUniqueInput
}

input UserProfileCreateOneWithoutLikedCommentsInput {
  create: UserProfileCreateWithoutLikedCommentsInput
  connect: UserProfileWhereUniqueInput
}

input UserProfileCreateOneWithoutLikedProjectsInput {
  create: UserProfileCreateWithoutLikedProjectsInput
  connect: UserProfileWhereUniqueInput
}

input UserProfileCreateOneWithoutProjectsInput {
  create: UserProfileCreateWithoutProjectsInput
  connect: UserProfileWhereUniqueInput
}

input UserProfileCreateWithoutCommentsInput {
  id: ID
  userAccountId: ID!
  email: String!
  firstName: String
  lastName: String
  profileImage: String
  country: String!
  address: String
  state: String
  city: String
  zip: String
  aptNumber: String
  projects: ProjectCreateManyWithoutProfileInput
  likedProjects: ProjectLikeCreateManyWithoutProfileInput
  likedComments: ProjectCommentLikeCreateManyWithoutProfileInput
}

input UserProfileCreateWithoutLikedCommentsInput {
  id: ID
  userAccountId: ID!
  email: String!
  firstName: String
  lastName: String
  profileImage: String
  country: String!
  address: String
  state: String
  city: String
  zip: String
  aptNumber: String
  projects: ProjectCreateManyWithoutProfileInput
  likedProjects: ProjectLikeCreateManyWithoutProfileInput
  comments: ProjectCommentCreateManyWithoutProfileInput
}

input UserProfileCreateWithoutLikedProjectsInput {
  id: ID
  userAccountId: ID!
  email: String!
  firstName: String
  lastName: String
  profileImage: String
  country: String!
  address: String
  state: String
  city: String
  zip: String
  aptNumber: String
  projects: ProjectCreateManyWithoutProfileInput
  comments: ProjectCommentCreateManyWithoutProfileInput
  likedComments: ProjectCommentLikeCreateManyWithoutProfileInput
}

input UserProfileCreateWithoutProjectsInput {
  id: ID
  userAccountId: ID!
  email: String!
  firstName: String
  lastName: String
  profileImage: String
  country: String!
  address: String
  state: String
  city: String
  zip: String
  aptNumber: String
  likedProjects: ProjectLikeCreateManyWithoutProfileInput
  comments: ProjectCommentCreateManyWithoutProfileInput
  likedComments: ProjectCommentLikeCreateManyWithoutProfileInput
}

type UserProfileEdge {
  node: UserProfile!
  cursor: String!
}

enum UserProfileOrderByInput {
  id_ASC
  id_DESC
  userAccountId_ASC
  userAccountId_DESC
  email_ASC
  email_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  profileImage_ASC
  profileImage_DESC
  country_ASC
  country_DESC
  address_ASC
  address_DESC
  state_ASC
  state_DESC
  city_ASC
  city_DESC
  zip_ASC
  zip_DESC
  aptNumber_ASC
  aptNumber_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserProfilePreviousValues {
  id: ID!
  userAccountId: ID!
  email: String!
  firstName: String
  lastName: String
  profileImage: String
  country: String!
  address: String
  state: String
  city: String
  zip: String
  aptNumber: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserProfileSubscriptionPayload {
  mutation: MutationType!
  node: UserProfile
  updatedFields: [String!]
  previousValues: UserProfilePreviousValues
}

input UserProfileSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserProfileWhereInput
  AND: [UserProfileSubscriptionWhereInput!]
  OR: [UserProfileSubscriptionWhereInput!]
  NOT: [UserProfileSubscriptionWhereInput!]
}

input UserProfileUpdateInput {
  userAccountId: ID
  email: String
  firstName: String
  lastName: String
  profileImage: String
  country: String
  address: String
  state: String
  city: String
  zip: String
  aptNumber: String
  projects: ProjectUpdateManyWithoutProfileInput
  likedProjects: ProjectLikeUpdateManyWithoutProfileInput
  comments: ProjectCommentUpdateManyWithoutProfileInput
  likedComments: ProjectCommentLikeUpdateManyWithoutProfileInput
}

input UserProfileUpdateManyMutationInput {
  userAccountId: ID
  email: String
  firstName: String
  lastName: String
  profileImage: String
  country: String
  address: String
  state: String
  city: String
  zip: String
  aptNumber: String
}

input UserProfileUpdateOneRequiredWithoutCommentsInput {
  create: UserProfileCreateWithoutCommentsInput
  update: UserProfileUpdateWithoutCommentsDataInput
  upsert: UserProfileUpsertWithoutCommentsInput
  connect: UserProfileWhereUniqueInput
}

input UserProfileUpdateOneRequiredWithoutLikedCommentsInput {
  create: UserProfileCreateWithoutLikedCommentsInput
  update: UserProfileUpdateWithoutLikedCommentsDataInput
  upsert: UserProfileUpsertWithoutLikedCommentsInput
  connect: UserProfileWhereUniqueInput
}

input UserProfileUpdateOneRequiredWithoutLikedProjectsInput {
  create: UserProfileCreateWithoutLikedProjectsInput
  update: UserProfileUpdateWithoutLikedProjectsDataInput
  upsert: UserProfileUpsertWithoutLikedProjectsInput
  connect: UserProfileWhereUniqueInput
}

input UserProfileUpdateOneRequiredWithoutProjectsInput {
  create: UserProfileCreateWithoutProjectsInput
  update: UserProfileUpdateWithoutProjectsDataInput
  upsert: UserProfileUpsertWithoutProjectsInput
  connect: UserProfileWhereUniqueInput
}

input UserProfileUpdateWithoutCommentsDataInput {
  userAccountId: ID
  email: String
  firstName: String
  lastName: String
  profileImage: String
  country: String
  address: String
  state: String
  city: String
  zip: String
  aptNumber: String
  projects: ProjectUpdateManyWithoutProfileInput
  likedProjects: ProjectLikeUpdateManyWithoutProfileInput
  likedComments: ProjectCommentLikeUpdateManyWithoutProfileInput
}

input UserProfileUpdateWithoutLikedCommentsDataInput {
  userAccountId: ID
  email: String
  firstName: String
  lastName: String
  profileImage: String
  country: String
  address: String
  state: String
  city: String
  zip: String
  aptNumber: String
  projects: ProjectUpdateManyWithoutProfileInput
  likedProjects: ProjectLikeUpdateManyWithoutProfileInput
  comments: ProjectCommentUpdateManyWithoutProfileInput
}

input UserProfileUpdateWithoutLikedProjectsDataInput {
  userAccountId: ID
  email: String
  firstName: String
  lastName: String
  profileImage: String
  country: String
  address: String
  state: String
  city: String
  zip: String
  aptNumber: String
  projects: ProjectUpdateManyWithoutProfileInput
  comments: ProjectCommentUpdateManyWithoutProfileInput
  likedComments: ProjectCommentLikeUpdateManyWithoutProfileInput
}

input UserProfileUpdateWithoutProjectsDataInput {
  userAccountId: ID
  email: String
  firstName: String
  lastName: String
  profileImage: String
  country: String
  address: String
  state: String
  city: String
  zip: String
  aptNumber: String
  likedProjects: ProjectLikeUpdateManyWithoutProfileInput
  comments: ProjectCommentUpdateManyWithoutProfileInput
  likedComments: ProjectCommentLikeUpdateManyWithoutProfileInput
}

input UserProfileUpsertWithoutCommentsInput {
  update: UserProfileUpdateWithoutCommentsDataInput!
  create: UserProfileCreateWithoutCommentsInput!
}

input UserProfileUpsertWithoutLikedCommentsInput {
  update: UserProfileUpdateWithoutLikedCommentsDataInput!
  create: UserProfileCreateWithoutLikedCommentsInput!
}

input UserProfileUpsertWithoutLikedProjectsInput {
  update: UserProfileUpdateWithoutLikedProjectsDataInput!
  create: UserProfileCreateWithoutLikedProjectsInput!
}

input UserProfileUpsertWithoutProjectsInput {
  update: UserProfileUpdateWithoutProjectsDataInput!
  create: UserProfileCreateWithoutProjectsInput!
}

input UserProfileWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  userAccountId: ID
  userAccountId_not: ID
  userAccountId_in: [ID!]
  userAccountId_not_in: [ID!]
  userAccountId_lt: ID
  userAccountId_lte: ID
  userAccountId_gt: ID
  userAccountId_gte: ID
  userAccountId_contains: ID
  userAccountId_not_contains: ID
  userAccountId_starts_with: ID
  userAccountId_not_starts_with: ID
  userAccountId_ends_with: ID
  userAccountId_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  profileImage: String
  profileImage_not: String
  profileImage_in: [String!]
  profileImage_not_in: [String!]
  profileImage_lt: String
  profileImage_lte: String
  profileImage_gt: String
  profileImage_gte: String
  profileImage_contains: String
  profileImage_not_contains: String
  profileImage_starts_with: String
  profileImage_not_starts_with: String
  profileImage_ends_with: String
  profileImage_not_ends_with: String
  country: String
  country_not: String
  country_in: [String!]
  country_not_in: [String!]
  country_lt: String
  country_lte: String
  country_gt: String
  country_gte: String
  country_contains: String
  country_not_contains: String
  country_starts_with: String
  country_not_starts_with: String
  country_ends_with: String
  country_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  zip: String
  zip_not: String
  zip_in: [String!]
  zip_not_in: [String!]
  zip_lt: String
  zip_lte: String
  zip_gt: String
  zip_gte: String
  zip_contains: String
  zip_not_contains: String
  zip_starts_with: String
  zip_not_starts_with: String
  zip_ends_with: String
  zip_not_ends_with: String
  aptNumber: String
  aptNumber_not: String
  aptNumber_in: [String!]
  aptNumber_not_in: [String!]
  aptNumber_lt: String
  aptNumber_lte: String
  aptNumber_gt: String
  aptNumber_gte: String
  aptNumber_contains: String
  aptNumber_not_contains: String
  aptNumber_starts_with: String
  aptNumber_not_starts_with: String
  aptNumber_ends_with: String
  aptNumber_not_ends_with: String
  projects_every: ProjectWhereInput
  projects_some: ProjectWhereInput
  projects_none: ProjectWhereInput
  likedProjects_every: ProjectLikeWhereInput
  likedProjects_some: ProjectLikeWhereInput
  likedProjects_none: ProjectLikeWhereInput
  comments_every: ProjectCommentWhereInput
  comments_some: ProjectCommentWhereInput
  comments_none: ProjectCommentWhereInput
  likedComments_every: ProjectCommentLikeWhereInput
  likedComments_some: ProjectCommentLikeWhereInput
  likedComments_none: ProjectCommentLikeWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserProfileWhereInput!]
  OR: [UserProfileWhereInput!]
  NOT: [UserProfileWhereInput!]
}

input UserProfileWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    