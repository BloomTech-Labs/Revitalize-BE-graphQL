# source: http://localhost:4466
# timestamp: Tue Sep 17 2019 10:15:49 GMT-0700 (Pacific Daylight Time)

enum AccountType {
  UserAccount
  GoogleAccount
  FacebookAccount
  TwitterAccount
}

type AggregateFacebookAccount {
  count: Int!
}

type AggregateGoogleAccount {
  count: Int!
}

type AggregateProject {
  count: Int!
}

type AggregateTwitterAccount {
  count: Int!
}

type AggregateUserAccount {
  count: Int!
}

type AggregateUserProfile {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type FacebookAccount implements Node {
  id: ID!
  accountId: ID!
  profile: UserProfile!
}

"""A connection to a list of items."""
type FacebookAccountConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FacebookAccountEdge]!
  aggregate: AggregateFacebookAccount!
}

input FacebookAccountCreateInput {
  id: ID
  accountId: ID!
  profile: UserProfileCreateOneInput!
}

"""An edge in a connection."""
type FacebookAccountEdge {
  """The item at the end of the edge."""
  node: FacebookAccount!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FacebookAccountOrderByInput {
  id_ASC
  id_DESC
  accountId_ASC
  accountId_DESC
}

type FacebookAccountPreviousValues {
  id: ID!
  accountId: ID!
}

type FacebookAccountSubscriptionPayload {
  mutation: MutationType!
  node: FacebookAccount
  updatedFields: [String!]
  previousValues: FacebookAccountPreviousValues
}

input FacebookAccountSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FacebookAccountSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FacebookAccountSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FacebookAccountSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FacebookAccountWhereInput
}

input FacebookAccountUpdateInput {
  accountId: ID
  profile: UserProfileUpdateOneRequiredInput
}

input FacebookAccountUpdateManyMutationInput {
  accountId: ID
}

input FacebookAccountWhereInput {
  """Logical AND on all given filters."""
  AND: [FacebookAccountWhereInput!]

  """Logical OR on all given filters."""
  OR: [FacebookAccountWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FacebookAccountWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  accountId: ID

  """All values that are not equal to given value."""
  accountId_not: ID

  """All values that are contained in given list."""
  accountId_in: [ID!]

  """All values that are not contained in given list."""
  accountId_not_in: [ID!]

  """All values less than the given value."""
  accountId_lt: ID

  """All values less than or equal the given value."""
  accountId_lte: ID

  """All values greater than the given value."""
  accountId_gt: ID

  """All values greater than or equal the given value."""
  accountId_gte: ID

  """All values containing the given string."""
  accountId_contains: ID

  """All values not containing the given string."""
  accountId_not_contains: ID

  """All values starting with the given string."""
  accountId_starts_with: ID

  """All values not starting with the given string."""
  accountId_not_starts_with: ID

  """All values ending with the given string."""
  accountId_ends_with: ID

  """All values not ending with the given string."""
  accountId_not_ends_with: ID
  profile: UserProfileWhereInput
}

input FacebookAccountWhereUniqueInput {
  id: ID
  accountId: ID
}

type GoogleAccount implements Node {
  id: ID!
  accountId: ID!
  profile: UserProfile!
}

"""A connection to a list of items."""
type GoogleAccountConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GoogleAccountEdge]!
  aggregate: AggregateGoogleAccount!
}

input GoogleAccountCreateInput {
  id: ID
  accountId: ID!
  profile: UserProfileCreateOneInput!
}

"""An edge in a connection."""
type GoogleAccountEdge {
  """The item at the end of the edge."""
  node: GoogleAccount!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GoogleAccountOrderByInput {
  id_ASC
  id_DESC
  accountId_ASC
  accountId_DESC
}

type GoogleAccountPreviousValues {
  id: ID!
  accountId: ID!
}

type GoogleAccountSubscriptionPayload {
  mutation: MutationType!
  node: GoogleAccount
  updatedFields: [String!]
  previousValues: GoogleAccountPreviousValues
}

input GoogleAccountSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GoogleAccountSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GoogleAccountSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GoogleAccountSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GoogleAccountWhereInput
}

input GoogleAccountUpdateInput {
  accountId: ID
  profile: UserProfileUpdateOneRequiredInput
}

input GoogleAccountUpdateManyMutationInput {
  accountId: ID
}

input GoogleAccountWhereInput {
  """Logical AND on all given filters."""
  AND: [GoogleAccountWhereInput!]

  """Logical OR on all given filters."""
  OR: [GoogleAccountWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GoogleAccountWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  accountId: ID

  """All values that are not equal to given value."""
  accountId_not: ID

  """All values that are contained in given list."""
  accountId_in: [ID!]

  """All values that are not contained in given list."""
  accountId_not_in: [ID!]

  """All values less than the given value."""
  accountId_lt: ID

  """All values less than or equal the given value."""
  accountId_lte: ID

  """All values greater than the given value."""
  accountId_gt: ID

  """All values greater than or equal the given value."""
  accountId_gte: ID

  """All values containing the given string."""
  accountId_contains: ID

  """All values not containing the given string."""
  accountId_not_contains: ID

  """All values starting with the given string."""
  accountId_starts_with: ID

  """All values not starting with the given string."""
  accountId_not_starts_with: ID

  """All values ending with the given string."""
  accountId_ends_with: ID

  """All values not ending with the given string."""
  accountId_not_ends_with: ID
  profile: UserProfileWhereInput
}

input GoogleAccountWhereUniqueInput {
  id: ID
  accountId: ID
}

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUserAccount(data: UserAccountCreateInput!): UserAccount!
  createGoogleAccount(data: GoogleAccountCreateInput!): GoogleAccount!
  createFacebookAccount(data: FacebookAccountCreateInput!): FacebookAccount!
  createTwitterAccount(data: TwitterAccountCreateInput!): TwitterAccount!
  createProject(data: ProjectCreateInput!): Project!
  createUserProfile(data: UserProfileCreateInput!): UserProfile!
  updateUserAccount(data: UserAccountUpdateInput!, where: UserAccountWhereUniqueInput!): UserAccount
  updateGoogleAccount(data: GoogleAccountUpdateInput!, where: GoogleAccountWhereUniqueInput!): GoogleAccount
  updateFacebookAccount(data: FacebookAccountUpdateInput!, where: FacebookAccountWhereUniqueInput!): FacebookAccount
  updateTwitterAccount(data: TwitterAccountUpdateInput!, where: TwitterAccountWhereUniqueInput!): TwitterAccount
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateUserProfile(data: UserProfileUpdateInput!, where: UserProfileWhereUniqueInput!): UserProfile
  deleteUserAccount(where: UserAccountWhereUniqueInput!): UserAccount
  deleteGoogleAccount(where: GoogleAccountWhereUniqueInput!): GoogleAccount
  deleteFacebookAccount(where: FacebookAccountWhereUniqueInput!): FacebookAccount
  deleteTwitterAccount(where: TwitterAccountWhereUniqueInput!): TwitterAccount
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteUserProfile(where: UserProfileWhereUniqueInput!): UserProfile
  upsertUserAccount(where: UserAccountWhereUniqueInput!, create: UserAccountCreateInput!, update: UserAccountUpdateInput!): UserAccount!
  upsertGoogleAccount(where: GoogleAccountWhereUniqueInput!, create: GoogleAccountCreateInput!, update: GoogleAccountUpdateInput!): GoogleAccount!
  upsertFacebookAccount(where: FacebookAccountWhereUniqueInput!, create: FacebookAccountCreateInput!, update: FacebookAccountUpdateInput!): FacebookAccount!
  upsertTwitterAccount(where: TwitterAccountWhereUniqueInput!, create: TwitterAccountCreateInput!, update: TwitterAccountUpdateInput!): TwitterAccount!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  upsertUserProfile(where: UserProfileWhereUniqueInput!, create: UserProfileCreateInput!, update: UserProfileUpdateInput!): UserProfile!
  updateManyUserAccounts(data: UserAccountUpdateManyMutationInput!, where: UserAccountWhereInput): BatchPayload!
  updateManyGoogleAccounts(data: GoogleAccountUpdateManyMutationInput!, where: GoogleAccountWhereInput): BatchPayload!
  updateManyFacebookAccounts(data: FacebookAccountUpdateManyMutationInput!, where: FacebookAccountWhereInput): BatchPayload!
  updateManyTwitterAccounts(data: TwitterAccountUpdateManyMutationInput!, where: TwitterAccountWhereInput): BatchPayload!
  updateManyProjects(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
  updateManyUserProfiles(data: UserProfileUpdateManyMutationInput!, where: UserProfileWhereInput): BatchPayload!
  deleteManyUserAccounts(where: UserAccountWhereInput): BatchPayload!
  deleteManyGoogleAccounts(where: GoogleAccountWhereInput): BatchPayload!
  deleteManyFacebookAccounts(where: FacebookAccountWhereInput): BatchPayload!
  deleteManyTwitterAccounts(where: TwitterAccountWhereInput): BatchPayload!
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  deleteManyUserProfiles(where: UserProfileWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum PrismaDatabase {
  default
}

type Project implements Node {
  id: ID!
  profile: UserProfile!
  name: String!
  description: String!
  address: String!
  state: String!
  zip: String!
  city: String!
  goalAmount: Float!
  amountFunded: Float!
}

"""A connection to a list of items."""
type ProjectConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  id: ID
  name: String!
  description: String!
  address: String!
  state: String!
  zip: String!
  city: String!
  goalAmount: Float!
  amountFunded: Float!
  profile: UserProfileCreateOneWithoutProjectsInput!
}

input ProjectCreateManyWithoutProfileInput {
  create: [ProjectCreateWithoutProfileInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateWithoutProfileInput {
  id: ID
  name: String!
  description: String!
  address: String!
  state: String!
  zip: String!
  city: String!
  goalAmount: Float!
  amountFunded: Float!
}

"""An edge in a connection."""
type ProjectEdge {
  """The item at the end of the edge."""
  node: Project!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  address_ASC
  address_DESC
  state_ASC
  state_DESC
  zip_ASC
  zip_DESC
  city_ASC
  city_DESC
  goalAmount_ASC
  goalAmount_DESC
  amountFunded_ASC
  amountFunded_DESC
}

type ProjectPreviousValues {
  id: ID!
  name: String!
  description: String!
  address: String!
  state: String!
  zip: String!
  city: String!
  goalAmount: Float!
  amountFunded: Float!
}

input ProjectScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  zip: String

  """All values that are not equal to given value."""
  zip_not: String

  """All values that are contained in given list."""
  zip_in: [String!]

  """All values that are not contained in given list."""
  zip_not_in: [String!]

  """All values less than the given value."""
  zip_lt: String

  """All values less than or equal the given value."""
  zip_lte: String

  """All values greater than the given value."""
  zip_gt: String

  """All values greater than or equal the given value."""
  zip_gte: String

  """All values containing the given string."""
  zip_contains: String

  """All values not containing the given string."""
  zip_not_contains: String

  """All values starting with the given string."""
  zip_starts_with: String

  """All values not starting with the given string."""
  zip_not_starts_with: String

  """All values ending with the given string."""
  zip_ends_with: String

  """All values not ending with the given string."""
  zip_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  goalAmount: Float

  """All values that are not equal to given value."""
  goalAmount_not: Float

  """All values that are contained in given list."""
  goalAmount_in: [Float!]

  """All values that are not contained in given list."""
  goalAmount_not_in: [Float!]

  """All values less than the given value."""
  goalAmount_lt: Float

  """All values less than or equal the given value."""
  goalAmount_lte: Float

  """All values greater than the given value."""
  goalAmount_gt: Float

  """All values greater than or equal the given value."""
  goalAmount_gte: Float
  amountFunded: Float

  """All values that are not equal to given value."""
  amountFunded_not: Float

  """All values that are contained in given list."""
  amountFunded_in: [Float!]

  """All values that are not contained in given list."""
  amountFunded_not_in: [Float!]

  """All values less than the given value."""
  amountFunded_lt: Float

  """All values less than or equal the given value."""
  amountFunded_lte: Float

  """All values greater than the given value."""
  amountFunded_gt: Float

  """All values greater than or equal the given value."""
  amountFunded_gte: Float
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
}

input ProjectUpdateInput {
  name: String
  description: String
  address: String
  state: String
  zip: String
  city: String
  goalAmount: Float
  amountFunded: Float
  profile: UserProfileUpdateOneRequiredWithoutProjectsInput
}

input ProjectUpdateManyDataInput {
  name: String
  description: String
  address: String
  state: String
  zip: String
  city: String
  goalAmount: Float
  amountFunded: Float
}

input ProjectUpdateManyMutationInput {
  name: String
  description: String
  address: String
  state: String
  zip: String
  city: String
  goalAmount: Float
  amountFunded: Float
}

input ProjectUpdateManyWithoutProfileInput {
  create: [ProjectCreateWithoutProfileInput!]
  connect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  delete: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutProfileInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
  deleteMany: [ProjectScalarWhereInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutProfileInput!]
}

input ProjectUpdateManyWithWhereNestedInput {
  where: ProjectScalarWhereInput!
  data: ProjectUpdateManyDataInput!
}

input ProjectUpdateWithoutProfileDataInput {
  name: String
  description: String
  address: String
  state: String
  zip: String
  city: String
  goalAmount: Float
  amountFunded: Float
}

input ProjectUpdateWithWhereUniqueWithoutProfileInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutProfileDataInput!
}

input ProjectUpsertWithWhereUniqueWithoutProfileInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutProfileDataInput!
  create: ProjectCreateWithoutProfileInput!
}

input ProjectWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  zip: String

  """All values that are not equal to given value."""
  zip_not: String

  """All values that are contained in given list."""
  zip_in: [String!]

  """All values that are not contained in given list."""
  zip_not_in: [String!]

  """All values less than the given value."""
  zip_lt: String

  """All values less than or equal the given value."""
  zip_lte: String

  """All values greater than the given value."""
  zip_gt: String

  """All values greater than or equal the given value."""
  zip_gte: String

  """All values containing the given string."""
  zip_contains: String

  """All values not containing the given string."""
  zip_not_contains: String

  """All values starting with the given string."""
  zip_starts_with: String

  """All values not starting with the given string."""
  zip_not_starts_with: String

  """All values ending with the given string."""
  zip_ends_with: String

  """All values not ending with the given string."""
  zip_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  goalAmount: Float

  """All values that are not equal to given value."""
  goalAmount_not: Float

  """All values that are contained in given list."""
  goalAmount_in: [Float!]

  """All values that are not contained in given list."""
  goalAmount_not_in: [Float!]

  """All values less than the given value."""
  goalAmount_lt: Float

  """All values less than or equal the given value."""
  goalAmount_lte: Float

  """All values greater than the given value."""
  goalAmount_gt: Float

  """All values greater than or equal the given value."""
  goalAmount_gte: Float
  amountFunded: Float

  """All values that are not equal to given value."""
  amountFunded_not: Float

  """All values that are contained in given list."""
  amountFunded_in: [Float!]

  """All values that are not contained in given list."""
  amountFunded_not_in: [Float!]

  """All values less than the given value."""
  amountFunded_lt: Float

  """All values less than or equal the given value."""
  amountFunded_lte: Float

  """All values greater than the given value."""
  amountFunded_gt: Float

  """All values greater than or equal the given value."""
  amountFunded_gte: Float
  profile: UserProfileWhereInput
}

input ProjectWhereUniqueInput {
  id: ID
}

type Query {
  userAccounts(where: UserAccountWhereInput, orderBy: UserAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserAccount]!
  googleAccounts(where: GoogleAccountWhereInput, orderBy: GoogleAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GoogleAccount]!
  facebookAccounts(where: FacebookAccountWhereInput, orderBy: FacebookAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FacebookAccount]!
  twitterAccounts(where: TwitterAccountWhereInput, orderBy: TwitterAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TwitterAccount]!
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  userProfiles(where: UserProfileWhereInput, orderBy: UserProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserProfile]!
  userAccount(where: UserAccountWhereUniqueInput!): UserAccount
  googleAccount(where: GoogleAccountWhereUniqueInput!): GoogleAccount
  facebookAccount(where: FacebookAccountWhereUniqueInput!): FacebookAccount
  twitterAccount(where: TwitterAccountWhereUniqueInput!): TwitterAccount
  project(where: ProjectWhereUniqueInput!): Project
  userProfile(where: UserProfileWhereUniqueInput!): UserProfile
  userAccountsConnection(where: UserAccountWhereInput, orderBy: UserAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserAccountConnection!
  googleAccountsConnection(where: GoogleAccountWhereInput, orderBy: GoogleAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GoogleAccountConnection!
  facebookAccountsConnection(where: FacebookAccountWhereInput, orderBy: FacebookAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FacebookAccountConnection!
  twitterAccountsConnection(where: TwitterAccountWhereInput, orderBy: TwitterAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TwitterAccountConnection!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  userProfilesConnection(where: UserProfileWhereInput, orderBy: UserProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserProfileConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  userAccount(where: UserAccountSubscriptionWhereInput): UserAccountSubscriptionPayload
  googleAccount(where: GoogleAccountSubscriptionWhereInput): GoogleAccountSubscriptionPayload
  facebookAccount(where: FacebookAccountSubscriptionWhereInput): FacebookAccountSubscriptionPayload
  twitterAccount(where: TwitterAccountSubscriptionWhereInput): TwitterAccountSubscriptionPayload
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  userProfile(where: UserProfileSubscriptionWhereInput): UserProfileSubscriptionPayload
}

type TwitterAccount implements Node {
  id: ID!
  accountId: ID!
  profile: UserProfile!
}

"""A connection to a list of items."""
type TwitterAccountConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TwitterAccountEdge]!
  aggregate: AggregateTwitterAccount!
}

input TwitterAccountCreateInput {
  id: ID
  accountId: ID!
  profile: UserProfileCreateOneInput!
}

"""An edge in a connection."""
type TwitterAccountEdge {
  """The item at the end of the edge."""
  node: TwitterAccount!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TwitterAccountOrderByInput {
  id_ASC
  id_DESC
  accountId_ASC
  accountId_DESC
}

type TwitterAccountPreviousValues {
  id: ID!
  accountId: ID!
}

type TwitterAccountSubscriptionPayload {
  mutation: MutationType!
  node: TwitterAccount
  updatedFields: [String!]
  previousValues: TwitterAccountPreviousValues
}

input TwitterAccountSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TwitterAccountSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TwitterAccountSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TwitterAccountSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TwitterAccountWhereInput
}

input TwitterAccountUpdateInput {
  accountId: ID
  profile: UserProfileUpdateOneRequiredInput
}

input TwitterAccountUpdateManyMutationInput {
  accountId: ID
}

input TwitterAccountWhereInput {
  """Logical AND on all given filters."""
  AND: [TwitterAccountWhereInput!]

  """Logical OR on all given filters."""
  OR: [TwitterAccountWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TwitterAccountWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  accountId: ID

  """All values that are not equal to given value."""
  accountId_not: ID

  """All values that are contained in given list."""
  accountId_in: [ID!]

  """All values that are not contained in given list."""
  accountId_not_in: [ID!]

  """All values less than the given value."""
  accountId_lt: ID

  """All values less than or equal the given value."""
  accountId_lte: ID

  """All values greater than the given value."""
  accountId_gt: ID

  """All values greater than or equal the given value."""
  accountId_gte: ID

  """All values containing the given string."""
  accountId_contains: ID

  """All values not containing the given string."""
  accountId_not_contains: ID

  """All values starting with the given string."""
  accountId_starts_with: ID

  """All values not starting with the given string."""
  accountId_not_starts_with: ID

  """All values ending with the given string."""
  accountId_ends_with: ID

  """All values not ending with the given string."""
  accountId_not_ends_with: ID
  profile: UserProfileWhereInput
}

input TwitterAccountWhereUniqueInput {
  id: ID
  accountId: ID
}

type UserAccount implements Node {
  id: ID!
  email: String!
  password: String
  profile: UserProfile
}

"""A connection to a list of items."""
type UserAccountConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserAccountEdge]!
  aggregate: AggregateUserAccount!
}

input UserAccountCreateInput {
  id: ID
  email: String!
  password: String
  profile: UserProfileCreateOneInput
}

"""An edge in a connection."""
type UserAccountEdge {
  """The item at the end of the edge."""
  node: UserAccount!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserAccountOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserAccountPreviousValues {
  id: ID!
  email: String!
  password: String
}

type UserAccountSubscriptionPayload {
  mutation: MutationType!
  node: UserAccount
  updatedFields: [String!]
  previousValues: UserAccountPreviousValues
}

input UserAccountSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserAccountSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserAccountSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserAccountSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserAccountWhereInput
}

input UserAccountUpdateInput {
  email: String
  password: String
  profile: UserProfileUpdateOneInput
}

input UserAccountUpdateManyMutationInput {
  email: String
  password: String
}

input UserAccountWhereInput {
  """Logical AND on all given filters."""
  AND: [UserAccountWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserAccountWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserAccountWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  profile: UserProfileWhereInput
}

input UserAccountWhereUniqueInput {
  id: ID
  email: String
}

type UserProfile implements Node {
  id: ID!
  user: AccountType!
  email: String!
  firstName: String
  lastName: String
  profileImage: String
  city: String
  zip: String
  address: String
  state: String
  aptNumber: String
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
}

"""A connection to a list of items."""
type UserProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserProfileEdge]!
  aggregate: AggregateUserProfile!
}

input UserProfileCreateInput {
  id: ID
  user: AccountType!
  email: String!
  firstName: String
  lastName: String
  profileImage: String
  city: String
  zip: String
  address: String
  state: String
  aptNumber: String
  projects: ProjectCreateManyWithoutProfileInput
}

input UserProfileCreateOneInput {
  create: UserProfileCreateInput
  connect: UserProfileWhereUniqueInput
}

input UserProfileCreateOneWithoutProjectsInput {
  create: UserProfileCreateWithoutProjectsInput
  connect: UserProfileWhereUniqueInput
}

input UserProfileCreateWithoutProjectsInput {
  id: ID
  user: AccountType!
  email: String!
  firstName: String
  lastName: String
  profileImage: String
  city: String
  zip: String
  address: String
  state: String
  aptNumber: String
}

"""An edge in a connection."""
type UserProfileEdge {
  """The item at the end of the edge."""
  node: UserProfile!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserProfileOrderByInput {
  id_ASC
  id_DESC
  user_ASC
  user_DESC
  email_ASC
  email_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  profileImage_ASC
  profileImage_DESC
  city_ASC
  city_DESC
  zip_ASC
  zip_DESC
  address_ASC
  address_DESC
  state_ASC
  state_DESC
  aptNumber_ASC
  aptNumber_DESC
}

type UserProfilePreviousValues {
  id: ID!
  user: AccountType!
  email: String!
  firstName: String
  lastName: String
  profileImage: String
  city: String
  zip: String
  address: String
  state: String
  aptNumber: String
}

type UserProfileSubscriptionPayload {
  mutation: MutationType!
  node: UserProfile
  updatedFields: [String!]
  previousValues: UserProfilePreviousValues
}

input UserProfileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserProfileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserProfileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserProfileSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserProfileWhereInput
}

input UserProfileUpdateDataInput {
  user: AccountType
  email: String
  firstName: String
  lastName: String
  profileImage: String
  city: String
  zip: String
  address: String
  state: String
  aptNumber: String
  projects: ProjectUpdateManyWithoutProfileInput
}

input UserProfileUpdateInput {
  user: AccountType
  email: String
  firstName: String
  lastName: String
  profileImage: String
  city: String
  zip: String
  address: String
  state: String
  aptNumber: String
  projects: ProjectUpdateManyWithoutProfileInput
}

input UserProfileUpdateManyMutationInput {
  user: AccountType
  email: String
  firstName: String
  lastName: String
  profileImage: String
  city: String
  zip: String
  address: String
  state: String
  aptNumber: String
}

input UserProfileUpdateOneInput {
  create: UserProfileCreateInput
  connect: UserProfileWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserProfileUpdateDataInput
  upsert: UserProfileUpsertNestedInput
}

input UserProfileUpdateOneRequiredInput {
  create: UserProfileCreateInput
  connect: UserProfileWhereUniqueInput
  update: UserProfileUpdateDataInput
  upsert: UserProfileUpsertNestedInput
}

input UserProfileUpdateOneRequiredWithoutProjectsInput {
  create: UserProfileCreateWithoutProjectsInput
  connect: UserProfileWhereUniqueInput
  update: UserProfileUpdateWithoutProjectsDataInput
  upsert: UserProfileUpsertWithoutProjectsInput
}

input UserProfileUpdateWithoutProjectsDataInput {
  user: AccountType
  email: String
  firstName: String
  lastName: String
  profileImage: String
  city: String
  zip: String
  address: String
  state: String
  aptNumber: String
}

input UserProfileUpsertNestedInput {
  update: UserProfileUpdateDataInput!
  create: UserProfileCreateInput!
}

input UserProfileUpsertWithoutProjectsInput {
  update: UserProfileUpdateWithoutProjectsDataInput!
  create: UserProfileCreateWithoutProjectsInput!
}

input UserProfileWhereInput {
  """Logical AND on all given filters."""
  AND: [UserProfileWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserProfileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserProfileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  user: AccountType

  """All values that are not equal to given value."""
  user_not: AccountType

  """All values that are contained in given list."""
  user_in: [AccountType!]

  """All values that are not contained in given list."""
  user_not_in: [AccountType!]
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  profileImage: String

  """All values that are not equal to given value."""
  profileImage_not: String

  """All values that are contained in given list."""
  profileImage_in: [String!]

  """All values that are not contained in given list."""
  profileImage_not_in: [String!]

  """All values less than the given value."""
  profileImage_lt: String

  """All values less than or equal the given value."""
  profileImage_lte: String

  """All values greater than the given value."""
  profileImage_gt: String

  """All values greater than or equal the given value."""
  profileImage_gte: String

  """All values containing the given string."""
  profileImage_contains: String

  """All values not containing the given string."""
  profileImage_not_contains: String

  """All values starting with the given string."""
  profileImage_starts_with: String

  """All values not starting with the given string."""
  profileImage_not_starts_with: String

  """All values ending with the given string."""
  profileImage_ends_with: String

  """All values not ending with the given string."""
  profileImage_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  zip: String

  """All values that are not equal to given value."""
  zip_not: String

  """All values that are contained in given list."""
  zip_in: [String!]

  """All values that are not contained in given list."""
  zip_not_in: [String!]

  """All values less than the given value."""
  zip_lt: String

  """All values less than or equal the given value."""
  zip_lte: String

  """All values greater than the given value."""
  zip_gt: String

  """All values greater than or equal the given value."""
  zip_gte: String

  """All values containing the given string."""
  zip_contains: String

  """All values not containing the given string."""
  zip_not_contains: String

  """All values starting with the given string."""
  zip_starts_with: String

  """All values not starting with the given string."""
  zip_not_starts_with: String

  """All values ending with the given string."""
  zip_ends_with: String

  """All values not ending with the given string."""
  zip_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  aptNumber: String

  """All values that are not equal to given value."""
  aptNumber_not: String

  """All values that are contained in given list."""
  aptNumber_in: [String!]

  """All values that are not contained in given list."""
  aptNumber_not_in: [String!]

  """All values less than the given value."""
  aptNumber_lt: String

  """All values less than or equal the given value."""
  aptNumber_lte: String

  """All values greater than the given value."""
  aptNumber_gt: String

  """All values greater than or equal the given value."""
  aptNumber_gte: String

  """All values containing the given string."""
  aptNumber_contains: String

  """All values not containing the given string."""
  aptNumber_not_contains: String

  """All values starting with the given string."""
  aptNumber_starts_with: String

  """All values not starting with the given string."""
  aptNumber_not_starts_with: String

  """All values ending with the given string."""
  aptNumber_ends_with: String

  """All values not ending with the given string."""
  aptNumber_not_ends_with: String
  projects_every: ProjectWhereInput
  projects_some: ProjectWhereInput
  projects_none: ProjectWhereInput
}

input UserProfileWhereUniqueInput {
  id: ID
  email: String
}
